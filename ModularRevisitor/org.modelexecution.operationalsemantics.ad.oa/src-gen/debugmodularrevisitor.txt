ale.xtext.ale.impl.ReturnStatementImpl@20059cca -> ale.xtext.ale.impl.BooleanTypeTImpl@694c075 
ReturnStatement: [] |- return false : BooleanTypeT
 BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@7dd23e87 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@5f88a8d3 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@6f62bb2c -> ale.xtext.ale.impl.NullTypeTImpl@35ad12d0 
ReturnStatement: [] |- return null : NullTypeT
 NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.NullLiteralImpl@468615b3 -> ale.xtext.ale.impl.NullTypeTImpl@3be6c593 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@7514524b (name: offer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@7514524b (name: offer)

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@6eaa0332 (name: Offer) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new Offer() : 

------------------------
ale.xtext.ale.impl.ForLoopImpl@1646876b (name: token) ->  
ForLoop: [] |- for(Token token in tokens) { offer.getOf... : null
 VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@6e5c7ed3 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@720eeb07 ->  
ChainedCall: [] |- offer.getOfferedTokens().add(token) : null
 ChainedCall: [] |- offer.getOfferedTokens() : null
  VarRef: [] |- offer : null
  OperationCallOperation: [] |- getOfferedTokens() : null
   VarRef: [] |- offer : null
 OperationCallOperation: [] |- add(token) : null
  ChainedCall: [] |- offer.getOfferedTokens() : null
   VarRef: [] |- offer : null
   OperationCallOperation: [] |- getOfferedTokens() : null
    VarRef: [] |- offer : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@b2fb4bd ->  
ChainedCall: [] |- offer.getOfferedTokens() : null
 VarRef: [] |- offer : null
 OperationCallOperation: [] |- getOfferedTokens() : null
  VarRef: [] |- offer : null

------------------------
ale.xtext.ale.impl.VarRefImpl@608e9ed (value: offer) ->  
VarRef: [] |- offer : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5c9ebe0e (name: getOfferedTokens) ->  
OperationCallOperation: [] |- getOfferedTokens() : null
 VarRef: [] |- offer : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@594d3049 (name: add) ->  
OperationCallOperation: [] |- add(token) : null
 ChainedCall: [] |- offer.getOfferedTokens() : null
  VarRef: [] |- offer : null
  OperationCallOperation: [] |- getOfferedTokens() : null
   VarRef: [] |- offer : null

------------------------
ale.xtext.ale.impl.VarRefImpl@6e373e0b (value: token) ->  
VarRef: [] |- token : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@47f0930d ->  
ChainedCall: [] |- self.getOffers().add(offer) : null
 ChainedCall: [] |- self.getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
  OperationCallOperation: [] |- getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
 OperationCallOperation: [] |- add(offer) : null
  ChainedCall: [] |- self.getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
   OperationCallOperation: [] |- getOffers() : null
    SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@778f3cc2 ->  
ChainedCall: [] |- self.getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
 OperationCallOperation: [] |- getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@57f21a47 -> ale.xtext.ale.impl.ClassTypeTImpl@1bd12df2 
SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@e2a1d4 (name: getOffers) ->  
OperationCallOperation: [] |- getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@43c9323e (name: add) ->  
OperationCallOperation: [] |- add(offer) : null
 ChainedCall: [] |- self.getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
  OperationCallOperation: [] |- getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.VarRefImpl@ac97479 (value: offer) ->  
VarRef: [] |- offer : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@71487ef8 (name: tokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@71487ef8 (name: tokens)

------------------------
ale.xtext.ale.impl.NewSequenceImpl@6b893b1c ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- newSequence(Token) : 

------------------------
ale.xtext.ale.impl.ForLoopImpl@2ef1e210 (name: o) ->  
ForLoop: [] |- for(Offer o in self.getOffers()) { token... : null
 ChainedCall: [] |- self.getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
  OperationCallOperation: [] |- getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@264dc453 ->  
ChainedCall: [] |- self.getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
 OperationCallOperation: [] |- getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5e8812ce -> ale.xtext.ale.impl.ClassTypeTImpl@185d06b 
SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7f488a6d (name: getOffers) ->  
OperationCallOperation: [] |- getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@41d73ff0 ->  
ChainedCall: [] |- tokens.addAll(o.getOfferedTokens()) : null
 VarRef: [] |- tokens : null
 OperationCallOperation: [] |- addAll(o.getOfferedTokens()) : null
  VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@5f575b66 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@64f7a903 (name: addAll) ->  
OperationCallOperation: [] |- addAll(o.getOfferedTokens()) : null
 VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1530b42a ->  
ChainedCall: [] |- o.getOfferedTokens() : null
 VarRef: [] |- o : null
 OperationCallOperation: [] |- getOfferedTokens() : null
  VarRef: [] |- o : null

------------------------
ale.xtext.ale.impl.VarRefImpl@70595181 (value: o) ->  
VarRef: [] |- o : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@29bf4138 (name: getOfferedTokens) ->  
OperationCallOperation: [] |- getOfferedTokens() : null
 VarRef: [] |- o : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@45c524a0 ->  
ChainedCall: [] |- self.getOffers().clear() : null
 ChainedCall: [] |- self.getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
  OperationCallOperation: [] |- getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
 OperationCallOperation: [] |- clear() : null
  ChainedCall: [] |- self.getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
   OperationCallOperation: [] |- getOffers() : null
    SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@55c449d6 ->  
ChainedCall: [] |- self.getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
 OperationCallOperation: [] |- getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@6f2bcfb6 -> ale.xtext.ale.impl.ClassTypeTImpl@5c636919 
SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3ccef5ea (name: getOffers) ->  
OperationCallOperation: [] |- getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@50c236f7 (name: clear) ->  
OperationCallOperation: [] |- clear() : null
 ChainedCall: [] |- self.getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
  OperationCallOperation: [] |- getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@273f5fc0 ->  
ReturnStatement: [] |- return tokens : null
 VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@165862ee (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ForLoopImpl@14409c6d (name: o) ->  
ForLoop: [] |- for(Offer o in self.getOffers()) { if($[... : null
 ChainedCall: [] |- self.getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
  OperationCallOperation: [] |- getOffers() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@72947ff1 ->  
ChainedCall: [] |- self.getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...
 OperationCallOperation: [] |- getOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@65147f00 -> ale.xtext.ale.impl.ClassTypeTImpl@5124f55b 
SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@75a7343b (name: getOffers) ->  
OperationCallOperation: [] |- getOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityEdge { co...

------------------------
ale.xtext.ale.impl.IfStatementImpl@350ecb87 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[o].hasTokens()) { return true; } : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@73a44e59 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@73a44e59

------------------------
ale.xtext.ale.impl.OADenotImpl@3f6ebafa ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[o] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@79c432e3 (value: o) ->  
VarRef: [] |- o : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3a558caf (name: hasTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@3a558caf (name: hasTokens)

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@21a115c0 -> ale.xtext.ale.impl.BooleanTypeTImpl@4308ec30 
ReturnStatement: [] |- return true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@792a783d (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@6ca16ab2 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@6f8cb343 -> ale.xtext.ale.impl.BooleanTypeTImpl@2bcdfd9e 
ReturnStatement: [] |- return false : BooleanTypeT
 BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@127a2e83 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@5db54b91 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@53f33cdc ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@53f33cdc

------------------------
ale.xtext.ale.impl.SelfRefImpl@764ca22 -> ale.xtext.ale.impl.ClassTypeTImpl@59d8457b 
SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@2ff22285 (name: removeWithdrawnTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@2ff22285 (name: removeWithdrawnTokens)

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@78b9ce7b ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ReturnStatementImpl@78b9ce7b

------------------------
ale.xtext.ale.impl.CompareGOperationImpl@32e6086c ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- self.getOfferedTokens().size() > 0 : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@13f2e1c8 ->  
ChainedCall: [] |- self.getOfferedTokens().size() : null
 ChainedCall: [] |- self.getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
  OperationCallOperation: [] |- getOfferedTokens() : null
   SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
 OperationCallOperation: [] |- size() : null
  ChainedCall: [] |- self.getOfferedTokens() : null
   SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
   OperationCallOperation: [] |- getOfferedTokens() : null
    SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2d2a0f39 ->  
ChainedCall: [] |- self.getOfferedTokens() : null
 SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
 OperationCallOperation: [] |- getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@1b56d6f1 -> ale.xtext.ale.impl.ClassTypeTImpl@3ecb4008 
SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@19f1089f (name: getOfferedTokens) ->  
OperationCallOperation: [] |- getOfferedTokens() : null
 SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1d8946c8 (name: size) ->  
OperationCallOperation: [] |- size() : null
 ChainedCall: [] |- self.getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
  OperationCallOperation: [] |- getOfferedTokens() : null
   SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.IntLiteralImpl@60a7d187 (value: 0) -> ale.xtext.ale.impl.IntTypeTImpl@7a2e7b42 
IntLiteral: [] |- 0 : IntTypeT

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@b279ca9 (name: tokensToBeRemoved) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@b279ca9 (name: tokensToBeRemoved)

------------------------
ale.xtext.ale.impl.NewSequenceImpl@66a3c3f0 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- newSequence(Token) : 

------------------------
ale.xtext.ale.impl.ForLoopImpl@163e3b97 (name: token) ->  
ForLoop: [] |- for(Token token in self.getOfferedTokens... : null
 ChainedCall: [] |- self.getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
  OperationCallOperation: [] |- getOfferedTokens() : null
   SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@581f945a ->  
ChainedCall: [] |- self.getOfferedTokens() : null
 SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
 OperationCallOperation: [] |- getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@3f641211 -> ale.xtext.ale.impl.ClassTypeTImpl@d305e55 
SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@58e164e9 (name: getOfferedTokens) ->  
OperationCallOperation: [] |- getOfferedTokens() : null
 SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.IfStatementImpl@7a7d991 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[token].isWithdrawn()) { tokensToBeR... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@18cca7ee ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@18cca7ee

------------------------
ale.xtext.ale.impl.OADenotImpl@4bd94e32 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[token] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@19922a55 (value: token) ->  
VarRef: [] |- token : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@204013a7 (name: isWithdrawn) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@204013a7 (name: isWithdrawn)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5c674ec3 ->  
ChainedCall: [] |- tokensToBeRemoved.add(token) : null
 VarRef: [] |- tokensToBeRemoved : null
 OperationCallOperation: [] |- add(token) : null
  VarRef: [] |- tokensToBeRemoved : null

------------------------
ale.xtext.ale.impl.VarRefImpl@542f1798 (value: tokensToBeRemoved) ->  
VarRef: [] |- tokensToBeRemoved : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7452eb91 (name: add) ->  
OperationCallOperation: [] |- add(token) : null
 VarRef: [] |- tokensToBeRemoved : null

------------------------
ale.xtext.ale.impl.VarRefImpl@3edbf88e (value: token) ->  
VarRef: [] |- token : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1264ab1a ->  
ChainedCall: [] |- self.getOfferedTokens().removeAll(tokens... : null
 ChainedCall: [] |- self.getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
  OperationCallOperation: [] |- getOfferedTokens() : null
   SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
 OperationCallOperation: [] |- removeAll(tokensToBeRemoved) : null
  ChainedCall: [] |- self.getOfferedTokens() : null
   SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
   OperationCallOperation: [] |- getOfferedTokens() : null
    SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7109d4a4 ->  
ChainedCall: [] |- self.getOfferedTokens() : null
 SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
 OperationCallOperation: [] |- getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@4cb802df -> ale.xtext.ale.impl.ClassTypeTImpl@16582115 
SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@2dc68c4e (name: getOfferedTokens) ->  
OperationCallOperation: [] |- getOfferedTokens() : null
 SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1a4dde97 (name: removeAll) ->  
OperationCallOperation: [] |- removeAll(tokensToBeRemoved) : null
 ChainedCall: [] |- self.getOfferedTokens() : null
  SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...
  OperationCallOperation: [] |- getOfferedTokens() : null
   SelfRef: [] |- self : ClassTypeT 'class Offer { ref Sequence(T...

------------------------
ale.xtext.ale.impl.VarRefImpl@29fcc500 (value: tokensToBeRemoved) ->  
VarRef: [] |- tokensToBeRemoved : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@7e656bf9 -> ale.xtext.ale.impl.BooleanTypeTImpl@7277e8d6 
ReturnStatement: [] |- return false : BooleanTypeT
 BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@30924985 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@7b8a69b1 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@8c3b344 -> ale.xtext.ale.impl.NullTypeTImpl@74474263 
ReturnStatement: [] |- return null : NullTypeT
 NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.NullLiteralImpl@50dceeb3 -> ale.xtext.ale.impl.NullTypeTImpl@23c08577 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6c63e88d ->  
ChainedCall: [] |- self.setRunning(true) : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- setRunning(true) : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5b7d3ac4 -> ale.xtext.ale.impl.ClassTypeTImpl@6ebce881 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1b7adf4a (name: setRunning) ->  
OperationCallOperation: [] |- setRunning(true) : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@68ea6975 (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@46d3c306 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@411fcf94 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ReturnStatementImpl@411fcf94

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5056c64 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@5056c64

------------------------
ale.xtext.ale.impl.OADenotImpl@64d362c0 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self] : 

------------------------
ale.xtext.ale.impl.SelfRefImpl@3302481a -> ale.xtext.ale.impl.ClassTypeTImpl@849d5e5 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@c5e4281 (name: getRunning) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@c5e4281 (name: getRunning)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7ccf1bf5 ->  
ChainedCall: [] |- self.setRunning(false) : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- setRunning(false) : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@27b14a7 -> ale.xtext.ale.impl.ClassTypeTImpl@2f8502a6 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@13b522b3 (name: setRunning) ->  
OperationCallOperation: [] |- setRunning(false) : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@2c60a695 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@26f41f37 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@6d7994f6 -> ale.xtext.ale.impl.BooleanTypeTImpl@7e67331c 
ReturnStatement: [] |- return self.isRunning() : BooleanTypeT
 ChainedCall: [] |- self.isRunning() : BooleanTypeT
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- isRunning() : BooleanTypeT
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
   LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3945300a -> ale.xtext.ale.impl.BooleanTypeTImpl@38c737c8 
ChainedCall: [] |- self.isRunning() : BooleanTypeT
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- isRunning() : BooleanTypeT
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.SelfRefImpl@7af9e18 -> ale.xtext.ale.impl.ClassTypeTImpl@3f508244 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@65fe03ae (name: isRunning) -> ale.xtext.ale.impl.BooleanTypeTImpl@395b3f3e 
OperationCallOperation: [] |- isRunning() : BooleanTypeT
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@781982d (name: edge) ->  
ForLoop: [] |- for(ActivityEdge edge in self.getOutgoin... : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@26ffdfbb ->  
ChainedCall: [] |- self.getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@4761e79f -> ale.xtext.ale.impl.ClassTypeTImpl@7e6304da 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4caa5fae (name: getOutgoing) ->  
OperationCallOperation: [] |- getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@22e3ed07 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@22e3ed07

------------------------
ale.xtext.ale.impl.OADenotImpl@6af6abdb ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@743fde04 (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@410cc1e8 (name: sendOffer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@410cc1e8 (name: sendOffer)

------------------------
ale.xtext.ale.impl.VarRefImpl@23cd4324 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@54c60e3 (name: allTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@54c60e3 (name: allTokens)

------------------------
ale.xtext.ale.impl.NewSequenceImpl@48a3c2cf ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- newSequence(Token) : 

------------------------
ale.xtext.ale.impl.ForLoopImpl@70078097 (name: edge) ->  
ForLoop: [] |- for(ActivityEdge edge in self.getIncomin... : null
 ChainedCall: [] |- self.getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- getIncoming() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1e98d3ed ->  
ChainedCall: [] |- self.getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@478de496 -> ale.xtext.ale.impl.ClassTypeTImpl@7f9b05a9 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@bc2d7c8 (name: getIncoming) ->  
OperationCallOperation: [] |- getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@455cc32c (name: tokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@455cc32c (name: tokens)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@765f17d0 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@765f17d0

------------------------
ale.xtext.ale.impl.OADenotImpl@5539ff94 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@51d21478 (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@47fdff3b (name: takeOfferedTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@47fdff3b (name: takeOfferedTokens)

------------------------
ale.xtext.ale.impl.ForLoopImpl@49928183 (name: token) ->  
ForLoop: [] |- for(Token token in tokens) { $[token].wi... : null
 VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@127dadaf (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@67129cbc ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@67129cbc

------------------------
ale.xtext.ale.impl.OADenotImpl@5cf79cf6 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[token] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@23985212 (value: token) ->  
VarRef: [] |- token : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@15181ce1 (name: withdraw) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@15181ce1 (name: withdraw)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@661c8582 ->  
ChainedCall: [] |- allTokens.addAll(tokens) : null
 VarRef: [] |- allTokens : null
 OperationCallOperation: [] |- addAll(tokens) : null
  VarRef: [] |- allTokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@6ecb59b (value: allTokens) ->  
VarRef: [] |- allTokens : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@67056f96 (name: addAll) ->  
OperationCallOperation: [] |- addAll(tokens) : null
 VarRef: [] |- allTokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@301d2bc1 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@53be1034 ->  
ReturnStatement: [] |- return allTokens : null
 VarRef: [] |- allTokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@1f8bbc0a (value: allTokens) ->  
VarRef: [] |- allTokens : null

------------------------
ale.xtext.ale.impl.ForLoopImpl@6347a84e (name: token) ->  
ForLoop: [] |- for(Token token in tokens) { Token trans... : null
 VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@6df4029f (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@4a447b8 (name: transferredToken) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@4a447b8 (name: transferredToken)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@420c1b37 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@420c1b37

------------------------
ale.xtext.ale.impl.OADenotImpl@64defe0e ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[token] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@42e1fcaa (value: token) ->  
VarRef: [] |- token : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@45c260f0 (name: transfer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@45c260f0 (name: transfer)

------------------------
ale.xtext.ale.impl.SelfRefImpl@7488a2aa -> ale.xtext.ale.impl.ClassTypeTImpl@44e2fabc 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@39c1143d ->  
ChainedCall: [] |- self.getHeldTokens().add(transferredToke... : null
 ChainedCall: [] |- self.getHeldTokens() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- getHeldTokens() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- add(transferredToken) : null
  ChainedCall: [] |- self.getHeldTokens() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
   OperationCallOperation: [] |- getHeldTokens() : null
    SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6f522615 ->  
ChainedCall: [] |- self.getHeldTokens() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- getHeldTokens() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@205e86dd -> ale.xtext.ale.impl.ClassTypeTImpl@24208fd1 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1172fd8e (name: getHeldTokens) ->  
OperationCallOperation: [] |- getHeldTokens() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@20a36361 (name: add) ->  
OperationCallOperation: [] |- add(transferredToken) : null
 ChainedCall: [] |- self.getHeldTokens() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- getHeldTokens() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.VarRefImpl@a83868a (value: transferredToken) ->  
VarRef: [] |- transferredToken : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@3fbb851 (name: hasOffer) -> ale.xtext.ale.impl.BooleanTypeTImpl@42030a5b 
VarDeclaration: [] |- Boolean hasOffer = true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT
 LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@26c92fdf (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@6592e9ff 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@650dc7cb (name: edge) ->  
ForLoop: [] |- for(ActivityEdge edge in self.getIncomin... : null
 ChainedCall: [] |- self.getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- getIncoming() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5a509f5c ->  
ChainedCall: [] |- self.getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@3508f41e -> ale.xtext.ale.impl.ClassTypeTImpl@3676d8eb 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3eb04eeb (name: getIncoming) ->  
OperationCallOperation: [] |- getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.IfStatementImpl@dd366eb ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(not $[edge].hasOffer()) { hasOffer = ... : 

------------------------
ale.xtext.ale.impl.NotInfixOperationImpl@7f89db4b ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.NotInfixOperationImpl@7f89db4b

------------------------
ale.xtext.ale.impl.ChainedCallImpl@43f20547 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@43f20547

------------------------
ale.xtext.ale.impl.OADenotImpl@2df62edc ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@3b04e1b7 (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@a66261f (name: hasOffer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@a66261f (name: hasOffer)

------------------------
ale.xtext.ale.impl.VarAssignImpl@45718706 (name: hasOffer) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- hasOffer = false : 

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@59e4cf46 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@168887f3 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@62094cbb ->  
ReturnStatement: [] |- return hasOffer : null
 VarRef: [] |- hasOffer : null

------------------------
ale.xtext.ale.impl.VarRefImpl@55c2b649 (value: hasOffer) ->  
VarRef: [] |- hasOffer : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@509c099 ->  
ChainedCall: [] |- self.getHeldTokens().remove(token) : null
 ChainedCall: [] |- self.getHeldTokens() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- getHeldTokens() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- remove(token) : null
  ChainedCall: [] |- self.getHeldTokens() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
   OperationCallOperation: [] |- getHeldTokens() : null
    SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7f53d871 ->  
ChainedCall: [] |- self.getHeldTokens() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
 OperationCallOperation: [] |- getHeldTokens() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.SelfRefImpl@ae00535 -> ale.xtext.ale.impl.ClassTypeTImpl@4c0316ab 
SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3b1987c3 (name: getHeldTokens) ->  
OperationCallOperation: [] |- getHeldTokens() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@70df8531 (name: remove) ->  
OperationCallOperation: [] |- remove(token) : null
 ChainedCall: [] |- self.getHeldTokens() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...
  OperationCallOperation: [] |- getHeldTokens() : null
   SelfRef: [] |- self : ClassTypeT 'open class ActivityNode { co...

------------------------
ale.xtext.ale.impl.VarRefImpl@1bed2db6 (value: token) ->  
VarRef: [] |- token : null

------------------------
ale.xtext.ale.impl.IfStatementImpl@4f042d6 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(not self.isWithdrawn()) { $[self.getH... : 

------------------------
ale.xtext.ale.impl.NotInfixOperationImpl@3f53508e -> ale.xtext.ale.impl.BooleanTypeTImpl@3eacd3c5 
NotInfixOperationRule: [] |- not self.isWithdrawn() : BooleanTypeT
 ChainedCall: [] |- self.isWithdrawn() : BooleanTypeT
  SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
  OperationCallOperation: [] |- isWithdrawn() : BooleanTypeT
   SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
   LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6ff7fba4 -> ale.xtext.ale.impl.BooleanTypeTImpl@3e9de57b 
ChainedCall: [] |- self.isWithdrawn() : BooleanTypeT
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
 OperationCallOperation: [] |- isWithdrawn() : BooleanTypeT
  SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
  LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.SelfRefImpl@33f22f0 -> ale.xtext.ale.impl.ClassTypeTImpl@6cf85a44 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@55f36b3 (name: isWithdrawn) -> ale.xtext.ale.impl.BooleanTypeTImpl@381aaf3e 
OperationCallOperation: [] |- isWithdrawn() : BooleanTypeT
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
 LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@705734dc ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@705734dc

------------------------
ale.xtext.ale.impl.OADenotImpl@a85b084 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self.getHolder()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7613e5c9 ->  
ChainedCall: [] |- self.getHolder() : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
 OperationCallOperation: [] |- getHolder() : null
  SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@38fdbadc -> ale.xtext.ale.impl.ClassTypeTImpl@60706103 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@71c598cb (name: getHolder) ->  
OperationCallOperation: [] |- getHolder() : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@566317e7 (name: removeToken) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@566317e7 (name: removeToken)

------------------------
ale.xtext.ale.impl.SelfRefImpl@6ac9fb2f -> ale.xtext.ale.impl.ClassTypeTImpl@3197e64b 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3717257d ->  
ChainedCall: [] |- self.setHolder(null) : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
 OperationCallOperation: [] |- setHolder(null) : null
  SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@7985d057 -> ale.xtext.ale.impl.ClassTypeTImpl@1f13b047 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7a5b77dd (name: setHolder) ->  
OperationCallOperation: [] |- setHolder(null) : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.NullLiteralImpl@515c0177 -> ale.xtext.ale.impl.NullTypeTImpl@729d9fc4 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@3eb1e93c ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ReturnStatementImpl@3eb1e93c

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@5bfb3de5 (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@5bfb3de5 (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3c231764 ->  
ChainedCall: [] |- self.getHolder() : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
 OperationCallOperation: [] |- getHolder() : null
  SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@b7331be -> ale.xtext.ale.impl.ClassTypeTImpl@110690ed 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3abad1e5 (name: getHolder) ->  
OperationCallOperation: [] |- getHolder() : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.NullLiteralImpl@382cc742 -> ale.xtext.ale.impl.NullTypeTImpl@1f2d9938 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.IfStatementImpl@4f150f3c ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getHolder() != null) { self.with... : 

------------------------
ale.xtext.ale.impl.CompareNEOperationImpl@18f8c3a ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- self.getHolder() != null : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@57ab65fb ->  
ChainedCall: [] |- self.getHolder() : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
 OperationCallOperation: [] |- getHolder() : null
  SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@23d8e338 -> ale.xtext.ale.impl.ClassTypeTImpl@1dbe8312 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@44d37490 (name: getHolder) ->  
OperationCallOperation: [] |- getHolder() : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.NullLiteralImpl@3940de6c -> ale.xtext.ale.impl.NullTypeTImpl@3435cde 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@51ed14b0 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@51ed14b0

------------------------
ale.xtext.ale.impl.SelfRefImpl@ec59de9 -> ale.xtext.ale.impl.ClassTypeTImpl@266735a3 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@31c991e3 (name: withdraw) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@31c991e3 (name: withdraw)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4373af38 ->  
ChainedCall: [] |- self.setHolder(holder) : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...
 OperationCallOperation: [] |- setHolder(holder) : null
  SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@7a026b72 -> ale.xtext.ale.impl.ClassTypeTImpl@55f08c0e 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@580a8b0e (name: setHolder) ->  
OperationCallOperation: [] |- setHolder(holder) : null
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.VarRefImpl@7be53e84 (value: holder) ->  
VarRef: [] |- holder : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@12559371 -> ale.xtext.ale.impl.ClassTypeTImpl@3cbf33b1 
ReturnStatement: [] |- return self : ClassTypeT 'class Token { ref ActivityNo...
 SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@1e8b28ce -> ale.xtext.ale.impl.ClassTypeTImpl@25832d54 
SelfRef: [] |- self : ClassTypeT 'class Token { ref ActivityNo...

------------------------
ale.xtext.ale.impl.IfStatementImpl@5ff21a20 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(not $[self.getBaseToken()].isWithdraw... : 

------------------------
ale.xtext.ale.impl.NotInfixOperationImpl@14d77864 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.NotInfixOperationImpl@14d77864

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3020fa59 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@3020fa59

------------------------
ale.xtext.ale.impl.OADenotImpl@28632bcc ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self.getBaseToken()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@670f17fa ->  
ChainedCall: [] |- self.getBaseToken() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...
 OperationCallOperation: [] |- getBaseToken() : null
  SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.SelfRefImpl@48345727 -> ale.xtext.ale.impl.ClassTypeTImpl@3a56ce6a 
SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7ff19e4a (name: getBaseToken) ->  
OperationCallOperation: [] |- getBaseToken() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4efde733 (name: isWithdrawn) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@4efde733 (name: isWithdrawn)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3b3571b3 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@3b3571b3

------------------------
ale.xtext.ale.impl.OADenotImpl@48c5ab51 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self.getBaseToken()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@69a01905 ->  
ChainedCall: [] |- self.getBaseToken() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...
 OperationCallOperation: [] |- getBaseToken() : null
  SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.SelfRefImpl@2cf989f1 -> ale.xtext.ale.impl.ClassTypeTImpl@6b17a5d2 
SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3c51dd34 (name: getBaseToken) ->  
OperationCallOperation: [] |- getBaseToken() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@59ab66cc (name: withdraw) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@59ab66cc (name: withdraw)

------------------------
ale.xtext.ale.impl.IfStatementImpl@302a34cd ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getRemainingOffersCount() > 0) {... : 

------------------------
ale.xtext.ale.impl.CompareGOperationImpl@507c9538 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- self.getRemainingOffersCount() > 0 : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@62765a7e ->  
ChainedCall: [] |- self.getRemainingOffersCount() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...
 OperationCallOperation: [] |- getRemainingOffersCount() : null
  SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.SelfRefImpl@60e9ddfa -> ale.xtext.ale.impl.ClassTypeTImpl@2e7021ba 
SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1841176 (name: getRemainingOffersCount) ->  
OperationCallOperation: [] |- getRemainingOffersCount() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.IntLiteralImpl@35e5912b (value: 0) -> ale.xtext.ale.impl.IntTypeTImpl@12a550ad 
IntLiteral: [] |- 0 : IntTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4bb89f16 ->  
ChainedCall: [] |- self.setRemainingOffersCount(self.getRem... : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...
 OperationCallOperation: [] |- setRemainingOffersCount(self.getRemainin... : null
  SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.SelfRefImpl@6a9638b6 -> ale.xtext.ale.impl.ClassTypeTImpl@1e0cf90d 
SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@73639006 (name: setRemainingOffersCount) ->  
OperationCallOperation: [] |- setRemainingOffersCount(self.getRemainin... : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.SubOperationImpl@1d9f31ca ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- self.getRemainingOffersCount() - 1 : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4617e947 ->  
ChainedCall: [] |- self.getRemainingOffersCount() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...
 OperationCallOperation: [] |- getRemainingOffersCount() : null
  SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.SelfRefImpl@291bb223 -> ale.xtext.ale.impl.ClassTypeTImpl@4863f62b 
SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@393e063d (name: getRemainingOffersCount) ->  
OperationCallOperation: [] |- getRemainingOffersCount() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.IntLiteralImpl@5dcb71b1 (value: 1) -> ale.xtext.ale.impl.IntTypeTImpl@6731736c 
IntLiteral: [] |- 1 : IntTypeT

------------------------
ale.xtext.ale.impl.IfStatementImpl@24efe69e ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getRemainingOffersCount() == 0) ... : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@5091d28a (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@5091d28a (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1957394b ->  
ChainedCall: [] |- self.getRemainingOffersCount() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...
 OperationCallOperation: [] |- getRemainingOffersCount() : null
  SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.SelfRefImpl@1f979529 -> ale.xtext.ale.impl.ClassTypeTImpl@5fa9671f 
SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@44975b53 (name: getRemainingOffersCount) ->  
OperationCallOperation: [] |- getRemainingOffersCount() : null
 SelfRef: [] |- self : ClassTypeT 'class ForkedToken extends To...

------------------------
ale.xtext.ale.impl.IntLiteralImpl@1a4cc4c9 (value: 0) -> ale.xtext.ale.impl.IntTypeTImpl@26142976 
IntLiteral: [] |- 0 : IntTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@196cdf00 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@196cdf00

------------------------
ale.xtext.ale.impl.SuperRefImpl@675f42bd ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- super : 

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1b49b813 (name: withdraw) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@1b49b813 (name: withdraw)

------------------------
ale.xtext.ale.impl.ForLoopImpl@852e80b (name: v) ->  
ForLoop: [] |- for(Variable v in self.getLocals()) { $[... : null
 ChainedCall: [] |- self.getLocals() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getLocals() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@86f3bb9 ->  
ChainedCall: [] |- self.getLocals() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- getLocals() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@69ddc8a6 -> ale.xtext.ale.impl.ClassTypeTImpl@71914131 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@76507726 (name: getLocals) ->  
OperationCallOperation: [] |- getLocals() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@26e2a42a ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@26e2a42a

------------------------
ale.xtext.ale.impl.OADenotImpl@217dc0a8 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[v] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@54616ae6 (value: v) ->  
VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@ce472a1 (name: setCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@ce472a1 (name: setCurrentValue)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@70a3bb29 ->  
ChainedCall: [] |- v.getInitialValue() : null
 VarRef: [] |- v : null
 OperationCallOperation: [] |- getInitialValue() : null
  VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.VarRefImpl@2f4ac981 (value: v) ->  
VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@14c7b3 (name: getInitialValue) ->  
OperationCallOperation: [] |- getInitialValue() : null
 VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.IfStatementImpl@1dbaa80e ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(inputValues != null) { for(InputValue... : 

------------------------
ale.xtext.ale.impl.CompareNEOperationImpl@702d3263 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- inputValues != null : 

------------------------
ale.xtext.ale.impl.VarRefImpl@952fb26 (value: inputValues) ->  
VarRef: [] |- inputValues : null

------------------------
ale.xtext.ale.impl.NullLiteralImpl@2fdd8ce0 -> ale.xtext.ale.impl.NullTypeTImpl@1dd7e67c 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@7ec83369 (name: v) ->  
ForLoop: [] |- for(InputValue v in inputValues) { $[v.g... : null
 VarRef: [] |- inputValues : null

------------------------
ale.xtext.ale.impl.VarRefImpl@2324562a (value: inputValues) ->  
VarRef: [] |- inputValues : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6e30f63 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@6e30f63

------------------------
ale.xtext.ale.impl.OADenotImpl@dd73466 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[v.getVariable()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@c43b6f0 ->  
ChainedCall: [] |- v.getVariable() : null
 VarRef: [] |- v : null
 OperationCallOperation: [] |- getVariable() : null
  VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.VarRefImpl@4c0e9a98 (value: v) ->  
VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@52881c6d (name: getVariable) ->  
OperationCallOperation: [] |- getVariable() : null
 VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@66c8665e (name: setCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@66c8665e (name: setCurrentValue)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4f4f3676 ->  
ChainedCall: [] |- v.getValue() : null
 VarRef: [] |- v : null
 OperationCallOperation: [] |- getValue() : null
  VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.VarRefImpl@5d363086 (value: v) ->  
VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@78e947e8 (name: getValue) ->  
OperationCallOperation: [] |- getValue() : null
 VarRef: [] |- v : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6f768edc ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@6f768edc

------------------------
ale.xtext.ale.impl.SelfRefImpl@11cd4708 -> ale.xtext.ale.impl.ClassTypeTImpl@9d2eb46 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7bb17453 (name: initialize) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@7bb17453 (name: initialize)

------------------------
ale.xtext.ale.impl.VarRefImpl@7c11e310 (value: inputValues) ->  
VarRef: [] |- inputValues : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@79f0e9d ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@79f0e9d

------------------------
ale.xtext.ale.impl.SelfRefImpl@777ce1d1 -> ale.xtext.ale.impl.ClassTypeTImpl@e8a3c93 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@40faeb4 (name: initializeTrace) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@40faeb4 (name: initializeTrace)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7775d446 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@7775d446

------------------------
ale.xtext.ale.impl.SelfRefImpl@8e1c7d3 -> ale.xtext.ale.impl.ClassTypeTImpl@75697cba 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1803cd77 (name: run) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@1803cd77 (name: run)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3e5702d2 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@3e5702d2

------------------------
ale.xtext.ale.impl.SelfRefImpl@3839181a -> ale.xtext.ale.impl.ClassTypeTImpl@572f806d 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5c8b9b02 (name: runNodes) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@5c8b9b02 (name: runNodes)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@10e349a1 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@10e349a1

------------------------
ale.xtext.ale.impl.SelfRefImpl@162498fd -> ale.xtext.ale.impl.ClassTypeTImpl@49b9d915 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@662dbbeb (name: fireInitialNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@662dbbeb (name: fireInitialNode)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@66fe6fa7 (name: enabledNodes) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@66fe6fa7 (name: enabledNodes)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@55f20857 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@55f20857

------------------------
ale.xtext.ale.impl.SelfRefImpl@4064d619 -> ale.xtext.ale.impl.ClassTypeTImpl@16081a15 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@78e23cd1 (name: getEnabledNodes) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@78e23cd1 (name: getEnabledNodes)

------------------------
ale.xtext.ale.impl.WhileStatementImpl@7e7b4eb1 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- while(enabledNodes.size() > 0) { Activit... : 

------------------------
ale.xtext.ale.impl.CompareGOperationImpl@3b0e4199 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- enabledNodes.size() > 0 : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5dbc9cff ->  
ChainedCall: [] |- enabledNodes.size() : null
 VarRef: [] |- enabledNodes : null
 OperationCallOperation: [] |- size() : null
  VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.VarRefImpl@34d1372d (value: enabledNodes) ->  
VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@107be9c0 (name: size) ->  
OperationCallOperation: [] |- size() : null
 VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.IntLiteralImpl@59b060df (value: 0) -> ale.xtext.ale.impl.IntTypeTImpl@283a28c2 
IntLiteral: [] |- 0 : IntTypeT

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@5d876f1a (name: nextNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@5d876f1a (name: nextNode)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4891848b ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@4891848b

------------------------
ale.xtext.ale.impl.SelfRefImpl@3a12a83f -> ale.xtext.ale.impl.ClassTypeTImpl@33de940 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5c0befd8 (name: selectNextNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@5c0befd8 (name: selectNextNode)

------------------------
ale.xtext.ale.impl.VarRefImpl@67bc1044 (value: enabledNodes) ->  
VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@48400fdc ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@48400fdc

------------------------
ale.xtext.ale.impl.SelfRefImpl@4bb65c23 -> ale.xtext.ale.impl.ClassTypeTImpl@4cbe943 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3d84e12 (name: fireNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@3d84e12 (name: fireNode)

------------------------
ale.xtext.ale.impl.VarRefImpl@4c9791b2 (value: nextNode) ->  
VarRef: [] |- nextNode : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@35b99b47 (name: enabledNodes) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- enabledNodes = self.getEnabledNodes() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7450fb3c ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@7450fb3c

------------------------
ale.xtext.ale.impl.SelfRefImpl@7abf3c13 -> ale.xtext.ale.impl.ClassTypeTImpl@52c5937d 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@ad528f7 (name: getEnabledNodes) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@ad528f7 (name: getEnabledNodes)

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@4834dbeb ->  
ReturnStatement: [] |- return activityNodes.get(0) : null
 ChainedCall: [] |- activityNodes.get(0) : null
  VarRef: [] |- activityNodes : null
  OperationCallOperation: [] |- get(0) : null
   VarRef: [] |- activityNodes : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2ced932d ->  
ChainedCall: [] |- activityNodes.get(0) : null
 VarRef: [] |- activityNodes : null
 OperationCallOperation: [] |- get(0) : null
  VarRef: [] |- activityNodes : null

------------------------
ale.xtext.ale.impl.VarRefImpl@dfff13b (value: activityNodes) ->  
VarRef: [] |- activityNodes : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3568ce8a (name: get) ->  
OperationCallOperation: [] |- get(0) : null
 VarRef: [] |- activityNodes : null

------------------------
ale.xtext.ale.impl.IntLiteralImpl@1bd934f4 (value: 0) -> ale.xtext.ale.impl.IntTypeTImpl@2b40dddf 
IntLiteral: [] |- 0 : IntTypeT

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@7c5c2a5b (name: enabledNodes) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@7c5c2a5b (name: enabledNodes)

------------------------
ale.xtext.ale.impl.NewSequenceImpl@44b897bf ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- newSequence(ActivityNode) : 

------------------------
ale.xtext.ale.impl.ForLoopImpl@5e9e2f54 (name: node) ->  
ForLoop: [] |- for(ActivityNode node in self.getNodes()... : null
 ChainedCall: [] |- self.getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getNodes() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3ae789d5 ->  
ChainedCall: [] |- self.getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@3852c263 -> ale.xtext.ale.impl.ClassTypeTImpl@47db561e 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1719aeb2 (name: getNodes) ->  
OperationCallOperation: [] |- getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.IfStatementImpl@3c5bcf0e ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[node].isReady()) { enabledNodes.add... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@12b4533c ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@12b4533c

------------------------
ale.xtext.ale.impl.OADenotImpl@488213e6 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[node] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@506b0bb2 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@32aa8d0e (name: isReady) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@32aa8d0e (name: isReady)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5a722b47 ->  
ChainedCall: [] |- enabledNodes.add(node) : null
 VarRef: [] |- enabledNodes : null
 OperationCallOperation: [] |- add(node) : null
  VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.VarRefImpl@52cc9d20 (value: enabledNodes) ->  
VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3468a88a (name: add) ->  
OperationCallOperation: [] |- add(node) : null
 VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.VarRefImpl@45a828eb (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@73bb88e3 ->  
ReturnStatement: [] |- return enabledNodes : null
 VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.VarRefImpl@2e642e6 (value: enabledNodes) ->  
VarRef: [] |- enabledNodes : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@7f505b8b (name: initialNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@7f505b8b (name: initialNode)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5e2f2931 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@5e2f2931

------------------------
ale.xtext.ale.impl.SelfRefImpl@170aa371 -> ale.xtext.ale.impl.ClassTypeTImpl@1c812e57 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6afb3e18 (name: getInitialNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@6afb3e18 (name: getInitialNode)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2b1462dd ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@2b1462dd

------------------------
ale.xtext.ale.impl.SelfRefImpl@c55a02f -> ale.xtext.ale.impl.ClassTypeTImpl@62a118c1 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4e869bff (name: fireNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@4e869bff (name: fireNode)

------------------------
ale.xtext.ale.impl.VarRefImpl@7534e029 (value: initialNode) ->  
VarRef: [] |- initialNode : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@2d868f41 (name: tokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@2d868f41 (name: tokens)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7f0e8327 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@7f0e8327

------------------------
ale.xtext.ale.impl.OADenotImpl@66ebe700 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[node] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@2da2d8d3 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4a0b7e02 (name: takeOfferedTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@4a0b7e02 (name: takeOfferedTokens)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4197cbdf ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@4197cbdf

------------------------
ale.xtext.ale.impl.OADenotImpl@78fdf70a ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[node] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@4322cc86 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5248518e (name: fire) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@5248518e (name: fire)

------------------------
ale.xtext.ale.impl.VarRefImpl@3a2c5629 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6f3feb16 ->  
ChainedCall: [] |- self.getTrace().getExecutedNodes().add(n... : null
 ChainedCall: [] |- self.getTrace().getExecutedNodes() : null
  ChainedCall: [] |- self.getTrace() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
   OperationCallOperation: [] |- getTrace() : null
    SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getExecutedNodes() : null
   ChainedCall: [] |- self.getTrace() : null
    SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
    OperationCallOperation: [] |- getTrace() : null
     SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- add(node) : null
  ChainedCall: [] |- self.getTrace().getExecutedNodes() : null
   ChainedCall: [] |- self.getTrace() : null
    SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
    OperationCallOperation: [] |- getTrace() : null
     SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
   OperationCallOperation: [] |- getExecutedNodes() : null
    ChainedCall: [] |- self.getTrace() : null
     SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
     OperationCallOperation: [] |- getTrace() : null
      SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7f6b035e ->  
ChainedCall: [] |- self.getTrace().getExecutedNodes() : null
 ChainedCall: [] |- self.getTrace() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getTrace() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- getExecutedNodes() : null
  ChainedCall: [] |- self.getTrace() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
   OperationCallOperation: [] |- getTrace() : null
    SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@27440271 ->  
ChainedCall: [] |- self.getTrace() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- getTrace() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@7f8185ae -> ale.xtext.ale.impl.ClassTypeTImpl@4fa28f6f 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6f76b613 (name: getTrace) ->  
OperationCallOperation: [] |- getTrace() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@48a02950 (name: getExecutedNodes) ->  
OperationCallOperation: [] |- getExecutedNodes() : null
 ChainedCall: [] |- self.getTrace() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getTrace() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4ff0fdbf (name: add) ->  
OperationCallOperation: [] |- add(node) : null
 ChainedCall: [] |- self.getTrace().getExecutedNodes() : null
  ChainedCall: [] |- self.getTrace() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
   OperationCallOperation: [] |- getTrace() : null
    SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getExecutedNodes() : null
   ChainedCall: [] |- self.getTrace() : null
    SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
    OperationCallOperation: [] |- getTrace() : null
     SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.VarRefImpl@66b342a2 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.ForLoopImpl@5a99d662 (name: node) ->  
ForLoop: [] |- for(ActivityNode node in self.getNodes()... : null
 ChainedCall: [] |- self.getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getNodes() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3ac6211d ->  
ChainedCall: [] |- self.getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5083169 -> ale.xtext.ale.impl.ClassTypeTImpl@52544b23 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@11b6cd6c (name: getNodes) ->  
OperationCallOperation: [] |- getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.IfStatementImpl@39bcbe14 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[node].isInitialNode()) { return $[n... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7dfb5333 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@7dfb5333

------------------------
ale.xtext.ale.impl.OADenotImpl@5a812c4d ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[node] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@25fbe545 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@79eba3f0 (name: isInitialNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@79eba3f0 (name: isInitialNode)

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@d1eb9f9 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ReturnStatementImpl@d1eb9f9

------------------------
ale.xtext.ale.impl.ChainedCallImpl@77b5b4d2 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@77b5b4d2

------------------------
ale.xtext.ale.impl.OADenotImpl@53e57df7 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[node] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@7d4c4d03 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5e5e222 (name: asInitialNode) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@5e5e222 (name: asInitialNode)

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@5facd568 -> ale.xtext.ale.impl.NullTypeTImpl@473234a8 
ReturnStatement: [] |- return null : NullTypeT
 NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.NullLiteralImpl@27de11af -> ale.xtext.ale.impl.NullTypeTImpl@2dbf4b9f 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@2b05f574 (name: node) ->  
ForLoop: [] |- for(ActivityNode node in self.getNodes()... : null
 ChainedCall: [] |- self.getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getNodes() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6f576434 ->  
ChainedCall: [] |- self.getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@268b7905 -> ale.xtext.ale.impl.ClassTypeTImpl@763d70b0 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@222186f5 (name: getNodes) ->  
OperationCallOperation: [] |- getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@426a7c9 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@426a7c9

------------------------
ale.xtext.ale.impl.OADenotImpl@7918a519 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[node] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@572082e1 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@27ad22fb (name: run) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@27ad22fb (name: run)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@79ec36b6 (name: trace) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@79ec36b6 (name: trace)

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@72563d0 (name: Trace) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new Trace() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6937f1d6 ->  
ChainedCall: [] |- self.setTrace(trace) : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- setTrace(trace) : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@717623c0 -> ale.xtext.ale.impl.ClassTypeTImpl@6403007 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@556d04d (name: setTrace) ->  
OperationCallOperation: [] |- setTrace(trace) : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.VarRefImpl@7faee57b (value: trace) ->  
VarRef: [] |- trace : null

------------------------
ale.xtext.ale.impl.ForLoopImpl@2dc76488 (name: node) ->  
ForLoop: [] |- for(ActivityNode node in self.getNodes()... : null
 ChainedCall: [] |- self.getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
  OperationCallOperation: [] |- getNodes() : null
   SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2f4d997b ->  
ChainedCall: [] |- self.getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...
 OperationCallOperation: [] |- getNodes() : null
  SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.SelfRefImpl@2d7da4f0 -> ale.xtext.ale.impl.ClassTypeTImpl@5001c313 
SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3b8876f3 (name: getNodes) ->  
OperationCallOperation: [] |- getNodes() : null
 SelfRef: [] |- self : ClassTypeT 'open class Activity { cont T...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@b3fc7a8 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@b3fc7a8

------------------------
ale.xtext.ale.impl.OADenotImpl@4b25a81b ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[node] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@33e26062 (value: node) ->  
VarRef: [] |- node : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@2b4cb162 (name: terminate) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@2b4cb162 (name: terminate)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3a504af1 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@3a504af1

------------------------
ale.xtext.ale.impl.OADenotImpl@31e1f107 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self] : 

------------------------
ale.xtext.ale.impl.SelfRefImpl@66ab7a51 -> ale.xtext.ale.impl.ClassTypeTImpl@7b5993f 
SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@32bf0268 (name: doAction) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@32bf0268 (name: doAction)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@a80d10c ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@a80d10c

------------------------
ale.xtext.ale.impl.OADenotImpl@34576092 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self] : 

------------------------
ale.xtext.ale.impl.SelfRefImpl@993edbb -> ale.xtext.ale.impl.ClassTypeTImpl@1a10d189 
SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@437512a3 (name: sendOffers) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@437512a3 (name: sendOffers)

------------------------
ale.xtext.ale.impl.IfStatementImpl@7fe674fc ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getOutgoing().size() > 0) { Sequ... : 

------------------------
ale.xtext.ale.impl.CompareGOperationImpl@57ace095 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- self.getOutgoing().size() > 0 : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2fc29ef5 ->  
ChainedCall: [] |- self.getOutgoing().size() : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
 OperationCallOperation: [] |- size() : null
  ChainedCall: [] |- self.getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
   OperationCallOperation: [] |- getOutgoing() : null
    SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@63908f91 ->  
ChainedCall: [] |- self.getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
 OperationCallOperation: [] |- getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.SelfRefImpl@2f9d468b -> ale.xtext.ale.impl.ClassTypeTImpl@1d571ac4 
SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1f85b3a5 (name: getOutgoing) ->  
OperationCallOperation: [] |- getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@248bb396 (name: size) ->  
OperationCallOperation: [] |- size() : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.IntLiteralImpl@43005c91 (value: 0) -> ale.xtext.ale.impl.IntTypeTImpl@43104b26 
IntLiteral: [] |- 0 : IntTypeT

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@34c66087 (name: tokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@34c66087 (name: tokens)

------------------------
ale.xtext.ale.impl.NewSequenceImpl@6d9b7e5c ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- newSequence(Token) : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@646cfad3 ->  
ChainedCall: [] |- tokens.add(new Token()) : null
 VarRef: [] |- tokens : null
 OperationCallOperation: [] |- add(new Token()) : null
  VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@25c3bbf (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3483cc36 (name: add) ->  
OperationCallOperation: [] |- add(new Token()) : null
 VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@2ab0796f (name: Token) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new Token() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@49d23e45 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@49d23e45

------------------------
ale.xtext.ale.impl.OADenotImpl@639ab935 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self] : 

------------------------
ale.xtext.ale.impl.SelfRefImpl@7d0c7e5 -> ale.xtext.ale.impl.ClassTypeTImpl@68c74e1a 
SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@2e02bd71 (name: addTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@2e02bd71 (name: addTokens)

------------------------
ale.xtext.ale.impl.VarRefImpl@409fc209 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@41f1ca10 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@41f1ca10

------------------------
ale.xtext.ale.impl.OADenotImpl@7aa30e6a ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self.getOutgoing().get(0)] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@580c0252 ->  
ChainedCall: [] |- self.getOutgoing().get(0) : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
 OperationCallOperation: [] |- get(0) : null
  ChainedCall: [] |- self.getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
   OperationCallOperation: [] |- getOutgoing() : null
    SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@663d0cd0 ->  
ChainedCall: [] |- self.getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
 OperationCallOperation: [] |- getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.SelfRefImpl@29d3fb4d -> ale.xtext.ale.impl.ClassTypeTImpl@74c74612 
SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4b616043 (name: getOutgoing) ->  
OperationCallOperation: [] |- getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7347f5ef (name: get) ->  
OperationCallOperation: [] |- get(0) : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class Action { def void...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.IntLiteralImpl@4b2db9a7 (value: 0) -> ale.xtext.ale.impl.IntTypeTImpl@5163e374 
IntLiteral: [] |- 0 : IntTypeT

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@b8ebbf9 (name: sendOffer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@b8ebbf9 (name: sendOffer)

------------------------
ale.xtext.ale.impl.VarRefImpl@2b32d720 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@5f2914ee ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ReturnStatementImpl@5f2914ee

------------------------
ale.xtext.ale.impl.BooleanAndOperationImpl@77eec3c8 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- super.isReady() and $[self].hasOffers() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@581834d1 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@581834d1

------------------------
ale.xtext.ale.impl.SuperRefImpl@403d169c ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- super : 

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5724e411 (name: isReady) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@5724e411 (name: isReady)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@56d59dbe ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@56d59dbe

------------------------
ale.xtext.ale.impl.OADenotImpl@4f729509 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self] : 

------------------------
ale.xtext.ale.impl.SelfRefImpl@67d3e38d -> ale.xtext.ale.impl.ClassTypeTImpl@106bcb05 
SelfRef: [] |- self : ClassTypeT 'open class Action { def void...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@17a7870a (name: hasOffers) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@17a7870a (name: hasOffers)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3f5316f8 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@3f5316f8

------------------------
ale.xtext.ale.impl.OADenotImpl@1d7c9d22 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self.getActivity()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1dd09b7a ->  
ChainedCall: [] |- self.getActivity() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityFinalNode...
 OperationCallOperation: [] |- getActivity() : null
  SelfRef: [] |- self : ClassTypeT 'open class ActivityFinalNode...

------------------------
ale.xtext.ale.impl.SelfRefImpl@644928fd -> ale.xtext.ale.impl.ClassTypeTImpl@428ef08c 
SelfRef: [] |- self : ClassTypeT 'open class ActivityFinalNode...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@438a065a (name: getActivity) ->  
OperationCallOperation: [] |- getActivity() : null
 SelfRef: [] |- self : ClassTypeT 'open class ActivityFinalNode...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3a660684 (name: terminate) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@3a660684 (name: terminate)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5e477bab ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@5e477bab

------------------------
ale.xtext.ale.impl.OADenotImpl@6d4fd009 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self] : 

------------------------
ale.xtext.ale.impl.SelfRefImpl@c6bc30e -> ale.xtext.ale.impl.ClassTypeTImpl@cb7c919 
SelfRef: [] |- self : ClassTypeT 'open class ControlNode { def...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1d9a6a84 (name: addTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@1d9a6a84 (name: addTokens)

------------------------
ale.xtext.ale.impl.VarRefImpl@6bb99832 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@399845f8 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@399845f8

------------------------
ale.xtext.ale.impl.OADenotImpl@7718d605 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self] : 

------------------------
ale.xtext.ale.impl.SelfRefImpl@21ae1061 -> ale.xtext.ale.impl.ClassTypeTImpl@4201f3b8 
SelfRef: [] |- self : ClassTypeT 'open class ControlNode { def...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6f1746e (name: sendOffers) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@6f1746e (name: sendOffers)

------------------------
ale.xtext.ale.impl.VarRefImpl@4ca41f91 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@6b2f1ebb ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ReturnStatementImpl@6b2f1ebb

------------------------
ale.xtext.ale.impl.BooleanAndOperationImpl@37301371 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- super.isReady() and self.hasOffers() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1c29a9a4 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@1c29a9a4

------------------------
ale.xtext.ale.impl.SuperRefImpl@45e11ace ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- super : 

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@56a81e0f (name: isReady) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@56a81e0f (name: isReady)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@61b42430 ->  
ChainedCall: [] |- self.hasOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ControlNode { def...
 OperationCallOperation: [] |- hasOffers() : null
  SelfRef: [] |- self : ClassTypeT 'open class ControlNode { def...

------------------------
ale.xtext.ale.impl.SelfRefImpl@3081d52b -> ale.xtext.ale.impl.ClassTypeTImpl@cfc3b1e 
SelfRef: [] |- self : ClassTypeT 'open class ControlNode { def...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7d7b9e9f (name: hasOffers) ->  
OperationCallOperation: [] |- hasOffers() : null
 SelfRef: [] |- self : ClassTypeT 'open class ControlNode { def...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@794a03d3 (name: selectedEdge) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@794a03d3 (name: selectedEdge)

------------------------
ale.xtext.ale.impl.NullLiteralImpl@763967bd -> ale.xtext.ale.impl.NullTypeTImpl@3943a09d 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@310899d5 (name: edge) ->  
ForLoop: [] |- for(ActivityEdge edge in self.getOutgoin... : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1cb9d65b ->  
ChainedCall: [] |- self.getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...
 OperationCallOperation: [] |- getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.SelfRefImpl@21005efe -> ale.xtext.ale.impl.ClassTypeTImpl@b0e49ad 
SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5433bd3a (name: getOutgoing) ->  
OperationCallOperation: [] |- getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.IfStatementImpl@34a8fe3b ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[edge].isControlFlow()) { ControlFlo... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@17fca1fe ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@17fca1fe

------------------------
ale.xtext.ale.impl.OADenotImpl@5eef0456 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@37caa4cc (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@44e0dd28 (name: isControlFlow) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@44e0dd28 (name: isControlFlow)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@108a0835 (name: controlFlow) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@108a0835 (name: controlFlow)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@304fb8d9 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@304fb8d9

------------------------
ale.xtext.ale.impl.OADenotImpl@dabc864 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@4d20a244 (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1e66fc8e (name: asControlFlow) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@1e66fc8e (name: asControlFlow)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@53a206eb (name: guardValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@53a206eb (name: guardValue)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4863bcd6 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@4863bcd6

------------------------
ale.xtext.ale.impl.OADenotImpl@61c8bbd8 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[controlFlow.getGuard()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@221e7c54 ->  
ChainedCall: [] |- controlFlow.getGuard() : null
 VarRef: [] |- controlFlow : null
 OperationCallOperation: [] |- getGuard() : null
  VarRef: [] |- controlFlow : null

------------------------
ale.xtext.ale.impl.VarRefImpl@6aaf9590 (value: controlFlow) ->  
VarRef: [] |- controlFlow : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3f7f011f (name: getGuard) ->  
OperationCallOperation: [] |- getGuard() : null
 VarRef: [] |- controlFlow : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1b4d7b53 (name: getCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@1b4d7b53 (name: getCurrentValue)

------------------------
ale.xtext.ale.impl.IfStatementImpl@4a6048b2 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[guardValue].isBooleanValue()) { Boo... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5cf5577b ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@5cf5577b

------------------------
ale.xtext.ale.impl.OADenotImpl@1bc5c203 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[guardValue] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@6ba2a5cb (value: guardValue) ->  
VarRef: [] |- guardValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@23cf55d5 (name: isBooleanValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@23cf55d5 (name: isBooleanValue)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@6097953f (name: booleanValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@6097953f (name: booleanValue)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@475d77ff ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@475d77ff

------------------------
ale.xtext.ale.impl.OADenotImpl@2ec14a1c ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[guardValue] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@72a31c96 (value: guardValue) ->  
VarRef: [] |- guardValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@43b797f9 (name: asBooleanValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@43b797f9 (name: asBooleanValue)

------------------------
ale.xtext.ale.impl.IfStatementImpl@6f79e2ff ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(booleanValue.isValue()) { selectedEdg... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4bccc4a6 ->  
ChainedCall: [] |- booleanValue.isValue() : null
 VarRef: [] |- booleanValue : null
 OperationCallOperation: [] |- isValue() : null
  VarRef: [] |- booleanValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@21e136e5 (value: booleanValue) ->  
VarRef: [] |- booleanValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5e96757f (name: isValue) ->  
OperationCallOperation: [] |- isValue() : null
 VarRef: [] |- booleanValue : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@539c18c1 (name: selectedEdge) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- selectedEdge = edge : 

------------------------
ale.xtext.ale.impl.VarRefImpl@7b625a49 (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.VarRefImpl@1632f5d7 (value: break) ->  
VarRef: [] |- break : null

------------------------
ale.xtext.ale.impl.IfStatementImpl@2806b703 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(selectedEdge != null) { self.addToken... : 

------------------------
ale.xtext.ale.impl.CompareNEOperationImpl@1befe8d2 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- selectedEdge != null : 

------------------------
ale.xtext.ale.impl.VarRefImpl@72b649f4 (value: selectedEdge) ->  
VarRef: [] |- selectedEdge : null

------------------------
ale.xtext.ale.impl.NullLiteralImpl@732b8638 -> ale.xtext.ale.impl.NullTypeTImpl@465fe747 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ChainedCallImpl@ac5559a ->  
ChainedCall: [] |- self.addTokens(tokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...
 OperationCallOperation: [] |- addTokens(tokens) : null
  SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.SelfRefImpl@4a7c44df -> ale.xtext.ale.impl.ClassTypeTImpl@2b961059 
SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@65c911ee (name: addTokens) ->  
OperationCallOperation: [] |- addTokens(tokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.VarRefImpl@6fedbe4c (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@471f45d2 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@471f45d2

------------------------
ale.xtext.ale.impl.OADenotImpl@6af46abe ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[selectedEdge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@7e0fd34 (value: selectedEdge) ->  
VarRef: [] |- selectedEdge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@57d3c5a (name: sendOffer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@57d3c5a (name: sendOffer)

------------------------
ale.xtext.ale.impl.VarRefImpl@7119f4c8 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@15e22000 (name: ready) -> ale.xtext.ale.impl.BooleanTypeTImpl@f751afe 
VarDeclaration: [] |- Boolean ready = true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT
 LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@620afcdb (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@764f699c 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@50abcda4 (name: edge) ->  
ForLoop: [] |- for(ActivityEdge edge in self.getIncomin... : null
 ChainedCall: [] |- self.getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...
  OperationCallOperation: [] |- getIncoming() : null
   SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@228d4160 ->  
ChainedCall: [] |- self.getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...
 OperationCallOperation: [] |- getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.SelfRefImpl@17d48dce -> ale.xtext.ale.impl.ClassTypeTImpl@4f13cdcd 
SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@191cb47d (name: getIncoming) ->  
OperationCallOperation: [] |- getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class DecisionNode { de...

------------------------
ale.xtext.ale.impl.IfStatementImpl@6d8f98cb ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(not $[edge].hasOffer()) { ready = fal... : 

------------------------
ale.xtext.ale.impl.NotInfixOperationImpl@5e06c249 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.NotInfixOperationImpl@5e06c249

------------------------
ale.xtext.ale.impl.ChainedCallImpl@22c53aa8 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@22c53aa8

------------------------
ale.xtext.ale.impl.OADenotImpl@d716ee9 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@1ca9e64c (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@74556b1a (name: hasOffer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@74556b1a (name: hasOffer)

------------------------
ale.xtext.ale.impl.VarAssignImpl@794e3074 (name: ready) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- ready = false : 

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@2a062297 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@549c18ae 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@75d48176 ->  
ReturnStatement: [] |- return ready : null
 VarRef: [] |- ready : null

------------------------
ale.xtext.ale.impl.VarRefImpl@7aef2491 (value: ready) ->  
VarRef: [] |- ready : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@3cec398b (name: forkedTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@3cec398b (name: forkedTokens)

------------------------
ale.xtext.ale.impl.NewSequenceImpl@6c882648 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- newSequence(Token) : 

------------------------
ale.xtext.ale.impl.ForLoopImpl@1e166952 (name: token) ->  
ForLoop: [] |- for(Token token in tokens) { ForkedToken... : null
 VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@50d516c0 (value: tokens) ->  
VarRef: [] |- tokens : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@679a76fd (name: forkedToken) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@679a76fd (name: forkedToken)

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@74029378 (name: ForkedToken) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new ForkedToken() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@602da461 ->  
ChainedCall: [] |- forkedToken.setBaseToken(token) : null
 VarRef: [] |- forkedToken : null
 OperationCallOperation: [] |- setBaseToken(token) : null
  VarRef: [] |- forkedToken : null

------------------------
ale.xtext.ale.impl.VarRefImpl@54341b07 (value: forkedToken) ->  
VarRef: [] |- forkedToken : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@17d72e33 (name: setBaseToken) ->  
OperationCallOperation: [] |- setBaseToken(token) : null
 VarRef: [] |- forkedToken : null

------------------------
ale.xtext.ale.impl.VarRefImpl@7aad5ada (value: token) ->  
VarRef: [] |- token : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@eb58aab ->  
ChainedCall: [] |- forkedToken.setRemainingOffersCount(self... : null
 VarRef: [] |- forkedToken : null
 OperationCallOperation: [] |- setRemainingOffersCount(self.getOutgoing... : null
  VarRef: [] |- forkedToken : null

------------------------
ale.xtext.ale.impl.VarRefImpl@20bd9bf8 (value: forkedToken) ->  
VarRef: [] |- forkedToken : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@20a4e0fb (name: setRemainingOffersCount) ->  
OperationCallOperation: [] |- setRemainingOffersCount(self.getOutgoing... : null
 VarRef: [] |- forkedToken : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@120d31cf ->  
ChainedCall: [] |- self.getOutgoing().size() : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...
 OperationCallOperation: [] |- size() : null
  ChainedCall: [] |- self.getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...
   OperationCallOperation: [] |- getOutgoing() : null
    SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5e230a2d ->  
ChainedCall: [] |- self.getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...
 OperationCallOperation: [] |- getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@59879a2a -> ale.xtext.ale.impl.ClassTypeTImpl@73195a29 
SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@11ad9e48 (name: getOutgoing) ->  
OperationCallOperation: [] |- getOutgoing() : null
 SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6a5546fb (name: size) ->  
OperationCallOperation: [] |- size() : null
 ChainedCall: [] |- self.getOutgoing() : null
  SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...
  OperationCallOperation: [] |- getOutgoing() : null
   SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2c614bfe ->  
ChainedCall: [] |- forkedTokens.add(forkedToken) : null
 VarRef: [] |- forkedTokens : null
 OperationCallOperation: [] |- add(forkedToken) : null
  VarRef: [] |- forkedTokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@4952c292 (value: forkedTokens) ->  
VarRef: [] |- forkedTokens : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@34f05a2e (name: add) ->  
OperationCallOperation: [] |- add(forkedToken) : null
 VarRef: [] |- forkedTokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@524a2b0a (value: forkedToken) ->  
VarRef: [] |- forkedToken : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@d532583 ->  
ChainedCall: [] |- self.addTokens(forkedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...
 OperationCallOperation: [] |- addTokens(forkedTokens) : null
  SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@3bc43f2d -> ale.xtext.ale.impl.ClassTypeTImpl@7e97de5f 
SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5af1e488 (name: addTokens) ->  
OperationCallOperation: [] |- addTokens(forkedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.VarRefImpl@4d0bdf35 (value: forkedTokens) ->  
VarRef: [] |- forkedTokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@572cbcee ->  
ChainedCall: [] |- self.sendOffers(forkedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...
 OperationCallOperation: [] |- sendOffers(forkedTokens) : null
  SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@2acc727 -> ale.xtext.ale.impl.ClassTypeTImpl@2fbb19e5 
SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5f24bc7b (name: sendOffers) ->  
OperationCallOperation: [] |- sendOffers(forkedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class ForkNode { def vo...

------------------------
ale.xtext.ale.impl.VarRefImpl@7e3c3c67 (value: forkedTokens) ->  
VarRef: [] |- forkedTokens : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@3bbfe472 (name: producedTokens) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@3bbfe472 (name: producedTokens)

------------------------
ale.xtext.ale.impl.NewSequenceImpl@60ec0ca ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- newSequence(Token) : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1a4a9994 ->  
ChainedCall: [] |- producedTokens.add(new ControlToken()) : null
 VarRef: [] |- producedTokens : null
 OperationCallOperation: [] |- add(new ControlToken()) : null
  VarRef: [] |- producedTokens : null

------------------------
ale.xtext.ale.impl.VarRefImpl@26ab9936 (value: producedTokens) ->  
VarRef: [] |- producedTokens : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@565305b9 (name: add) ->  
OperationCallOperation: [] |- add(new ControlToken()) : null
 VarRef: [] |- producedTokens : null

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@6b7e6225 (name: ControlToken) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new ControlToken() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@11663455 ->  
ChainedCall: [] |- self.addTokens(producedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...
 OperationCallOperation: [] |- addTokens(producedTokens) : null
  SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5f56950d -> ale.xtext.ale.impl.ClassTypeTImpl@1b563dd4 
SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4c3ad860 (name: addTokens) ->  
OperationCallOperation: [] |- addTokens(producedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.VarRefImpl@7429a6c8 (value: producedTokens) ->  
VarRef: [] |- producedTokens : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1fbcbbbd ->  
ChainedCall: [] |- self.sendOffers(producedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...
 OperationCallOperation: [] |- sendOffers(producedTokens) : null
  SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5df89f2 -> ale.xtext.ale.impl.ClassTypeTImpl@2227e485 
SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3e0dd475 (name: sendOffers) ->  
OperationCallOperation: [] |- sendOffers(producedTokens) : null
 SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.VarRefImpl@7db00881 (value: producedTokens) ->  
VarRef: [] |- producedTokens : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@778fa66b -> ale.xtext.ale.impl.BooleanTypeTImpl@6202b3b8 
ReturnStatement: [] |- return false : BooleanTypeT
 BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@3f68e938 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@1501ea2c 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@1b8fcef4 -> ale.xtext.ale.impl.BooleanTypeTImpl@3f13ddc5 
ReturnStatement: [] |- return true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@563c9c8d (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@228d156e 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@3938ebd7 -> ale.xtext.ale.impl.ClassTypeTImpl@55e5edf4 
ReturnStatement: [] |- return self : ClassTypeT 'open class InitialNode { def...
 SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.SelfRefImpl@450e849b -> ale.xtext.ale.impl.ClassTypeTImpl@4f2f3dee 
SelfRef: [] |- self : ClassTypeT 'open class InitialNode { def...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@1cb3ebf7 (name: ready) -> ale.xtext.ale.impl.BooleanTypeTImpl@6e732c3b 
VarDeclaration: [] |- Boolean ready = true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT
 LiteralType: [] |= Boolean : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@23f4c6e4 (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@249f62fe 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@385e1521 (name: edge) ->  
ForLoop: [] |- for(ActivityEdge edge in self.getIncomin... : null
 ChainedCall: [] |- self.getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class JoinNode { def Bo...
  OperationCallOperation: [] |- getIncoming() : null
   SelfRef: [] |- self : ClassTypeT 'open class JoinNode { def Bo...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@353495da ->  
ChainedCall: [] |- self.getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class JoinNode { def Bo...
 OperationCallOperation: [] |- getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class JoinNode { def Bo...

------------------------
ale.xtext.ale.impl.SelfRefImpl@3072b67e -> ale.xtext.ale.impl.ClassTypeTImpl@5e6fb1d4 
SelfRef: [] |- self : ClassTypeT 'open class JoinNode { def Bo...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@78cd4a4c (name: getIncoming) ->  
OperationCallOperation: [] |- getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class JoinNode { def Bo...

------------------------
ale.xtext.ale.impl.IfStatementImpl@5fad035d ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(not $[edge].hasOffer()) { ready = fal... : 

------------------------
ale.xtext.ale.impl.NotInfixOperationImpl@7a498f90 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.NotInfixOperationImpl@7a498f90

------------------------
ale.xtext.ale.impl.ChainedCallImpl@684435bf ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@684435bf

------------------------
ale.xtext.ale.impl.OADenotImpl@1032d3d4 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@27b28d64 (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@11b1b30d (name: hasOffer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@11b1b30d (name: hasOffer)

------------------------
ale.xtext.ale.impl.VarAssignImpl@5ebb51fc (name: ready) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- ready = false : 

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@6dd12ee2 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@681927ba 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@7164c18e ->  
ReturnStatement: [] |- return ready : null
 VarRef: [] |- ready : null

------------------------
ale.xtext.ale.impl.VarRefImpl@250b2936 (value: ready) ->  
VarRef: [] |- ready : null

------------------------
ale.xtext.ale.impl.ForLoopImpl@12f9b42b (name: edge) ->  
ForLoop: [] |- for(ActivityEdge edge in self.getIncomin... : null
 ChainedCall: [] |- self.getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class MergeNode { def B...
  OperationCallOperation: [] |- getIncoming() : null
   SelfRef: [] |- self : ClassTypeT 'open class MergeNode { def B...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3b63c770 ->  
ChainedCall: [] |- self.getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class MergeNode { def B...
 OperationCallOperation: [] |- getIncoming() : null
  SelfRef: [] |- self : ClassTypeT 'open class MergeNode { def B...

------------------------
ale.xtext.ale.impl.SelfRefImpl@1456c646 -> ale.xtext.ale.impl.ClassTypeTImpl@1ffccc76 
SelfRef: [] |- self : ClassTypeT 'open class MergeNode { def B...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4b51700b (name: getIncoming) ->  
OperationCallOperation: [] |- getIncoming() : null
 SelfRef: [] |- self : ClassTypeT 'open class MergeNode { def B...

------------------------
ale.xtext.ale.impl.IfStatementImpl@1ae25156 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[edge].hasOffer()) { return true; } : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3824d0ba ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@3824d0ba

------------------------
ale.xtext.ale.impl.OADenotImpl@78352e9d ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[edge] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@3d23abc0 (value: edge) ->  
VarRef: [] |- edge : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@35c335d3 (name: hasOffer) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@35c335d3 (name: hasOffer)

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@7a6c10e5 -> ale.xtext.ale.impl.BooleanTypeTImpl@402bc5e5 
ReturnStatement: [] |- return true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@5ab1c9c3 (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@63692d25 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@76f012eb -> ale.xtext.ale.impl.BooleanTypeTImpl@42ecf205 
ReturnStatement: [] |- return false : BooleanTypeT
 BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@39d5fcfe (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@3b0a0952 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ForLoopImpl@1acf7d5e (name: e) ->  
ForLoop: [] |- for(Expression e in self.getExpressions(... : null
 ChainedCall: [] |- self.getExpressions() : null
  SelfRef: [] |- self : ClassTypeT 'open class OpaqueAction { de...
  OperationCallOperation: [] |- getExpressions() : null
   SelfRef: [] |- self : ClassTypeT 'open class OpaqueAction { de...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2d2a07a5 ->  
ChainedCall: [] |- self.getExpressions() : null
 SelfRef: [] |- self : ClassTypeT 'open class OpaqueAction { de...
 OperationCallOperation: [] |- getExpressions() : null
  SelfRef: [] |- self : ClassTypeT 'open class OpaqueAction { de...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5c489869 -> ale.xtext.ale.impl.ClassTypeTImpl@2590f73b 
SelfRef: [] |- self : ClassTypeT 'open class OpaqueAction { de...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3d8c3b33 (name: getExpressions) ->  
OperationCallOperation: [] |- getExpressions() : null
 SelfRef: [] |- self : ClassTypeT 'open class OpaqueAction { de...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6b628100 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@6b628100

------------------------
ale.xtext.ale.impl.OADenotImpl@73f1c7d5 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[e] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@2f782f3b (value: e) ->  
VarRef: [] |- e : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7cf98b6c (name: execute) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@7cf98b6c (name: execute)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@20a37d33 (name: operandValue1) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@20a37d33 (name: operandValue1)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@48ffdde2 ->  
ChainedCall: [] |- self.getCurrentValue(self.getOperand1()) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...
 OperationCallOperation: [] |- getCurrentValue(self.getOperand1()) : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.SelfRefImpl@51e266f9 -> ale.xtext.ale.impl.ClassTypeTImpl@fbaf6a9 
SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6a13c313 (name: getCurrentValue) ->  
OperationCallOperation: [] |- getCurrentValue(self.getOperand1()) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3c0c0a50 ->  
ChainedCall: [] |- self.getOperand1() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...
 OperationCallOperation: [] |- getOperand1() : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.SelfRefImpl@7e9b7686 -> ale.xtext.ale.impl.ClassTypeTImpl@2a635181 
SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@ae4291d (name: getOperand1) ->  
OperationCallOperation: [] |- getOperand1() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@56a325fd (name: operandValue2) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@56a325fd (name: operandValue2)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2f2b9367 ->  
ChainedCall: [] |- self.getCurrentValue(self.getOperand2()) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...
 OperationCallOperation: [] |- getCurrentValue(self.getOperand2()) : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.SelfRefImpl@4acfb5e -> ale.xtext.ale.impl.ClassTypeTImpl@41c89d06 
SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@4befbafb (name: getCurrentValue) ->  
OperationCallOperation: [] |- getCurrentValue(self.getOperand2()) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3d573c18 ->  
ChainedCall: [] |- self.getOperand2() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...
 OperationCallOperation: [] |- getOperand2() : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5e4246e7 -> ale.xtext.ale.impl.ClassTypeTImpl@6343932b 
SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@68cc17b6 (name: getOperand2) ->  
OperationCallOperation: [] |- getOperand2() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@7c7f0b7 (name: result) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@7c7f0b7 (name: result)

------------------------
ale.xtext.ale.impl.NullLiteralImpl@4fcda04c -> ale.xtext.ale.impl.NullTypeTImpl@3b943e54 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.IfStatementImpl@47346fa4 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getOperator() == admodular.Boole... : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@7f4e6dbd (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@7f4e6dbd (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5941a81c ->  
ChainedCall: [] |- self.getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...
 OperationCallOperation: [] |- getOperator() : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.SelfRefImpl@7b2cacb8 -> ale.xtext.ale.impl.ClassTypeTImpl@bcb8ffe 
SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1f81b536 (name: getOperator) ->  
OperationCallOperation: [] |- getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@13ae10fe ->  
ChainedCall: [] |- admodular.BooleanBinaryOperator.AND : null
 ChainedCall: [] |- admodular.BooleanBinaryOperator : null
  VarRef: [] |- admodular : null
  VarRef: [] |- BooleanBinaryOperator : null
 VarRef: [] |- AND : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@47fb5bdf ->  
ChainedCall: [] |- admodular.BooleanBinaryOperator : null
 VarRef: [] |- admodular : null
 VarRef: [] |- BooleanBinaryOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@592c76f4 (value: admodular) ->  
VarRef: [] |- admodular : null

------------------------
ale.xtext.ale.impl.VarRefImpl@4b1640e2 (value: BooleanBinaryOperator) ->  
VarRef: [] |- BooleanBinaryOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@285c909e (value: AND) ->  
VarRef: [] |- AND : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@fc54877 (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 and operandValue2 : 

------------------------
ale.xtext.ale.impl.BooleanAndOperationImpl@76ad183d ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- operandValue1 and operandValue2 : 

------------------------
ale.xtext.ale.impl.VarRefImpl@3a39be16 (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@2fd719f3 (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@1406e71d (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 or operandValue2 : 

------------------------
ale.xtext.ale.impl.BooleanOrOperationImpl@63b83285 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.BooleanOrOperationImpl@63b83285

------------------------
ale.xtext.ale.impl.VarRefImpl@74b7b780 (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@5d3e8392 (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7ea3b927 ->  
ChainedCall: [] |- self.assignValue(result) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...
 OperationCallOperation: [] |- assignValue(result) : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5cad906c -> ale.xtext.ale.impl.ClassTypeTImpl@eee132c 
SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@15ef37ce (name: assignValue) ->  
OperationCallOperation: [] |- assignValue(result) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanBinaryExpr...

------------------------
ale.xtext.ale.impl.VarRefImpl@5fedf8d8 (value: result) ->  
VarRef: [] |- result : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@2be82a5a (name: resultValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@2be82a5a (name: resultValue)

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@431ba3d9 (name: BooleanValue) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new BooleanValue() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@acbddbb ->  
ChainedCall: [] |- resultValue.setValue(value) : null
 VarRef: [] |- resultValue : null
 OperationCallOperation: [] |- setValue(value) : null
  VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@601b8c42 (value: resultValue) ->  
VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@45158a7f (name: setValue) ->  
OperationCallOperation: [] |- setValue(value) : null
 VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@f7cd4a0 (value: value) ->  
VarRef: [] |- value : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@33392091 (name: assignee) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@33392091 (name: assignee)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7657f052 ->  
ChainedCall: [] |- self.getAssignee() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanExpression...
 OperationCallOperation: [] |- getAssignee() : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanExpression...

------------------------
ale.xtext.ale.impl.SelfRefImpl@1fe7e3ec -> ale.xtext.ale.impl.ClassTypeTImpl@71cb1311 
SelfRef: [] |- self : ClassTypeT 'open class BooleanExpression...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@65a06529 (name: getAssignee) ->  
OperationCallOperation: [] |- getAssignee() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanExpression...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@fcba2bc ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@fcba2bc

------------------------
ale.xtext.ale.impl.OADenotImpl@46570677 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[assignee] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@660f65d2 (value: assignee) ->  
VarRef: [] |- assignee : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@60cd17 (name: setCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@60cd17 (name: setCurrentValue)

------------------------
ale.xtext.ale.impl.VarRefImpl@2c769161 (value: resultValue) ->  
VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@6a5328f0 (name: currentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@6a5328f0 (name: currentValue)

------------------------
ale.xtext.ale.impl.NullLiteralImpl@5925ce0c -> ale.xtext.ale.impl.NullTypeTImpl@6b37e5e2 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@4d8abaa7 (name: value) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@4d8abaa7 (name: value)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@42c249d3 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@42c249d3

------------------------
ale.xtext.ale.impl.OADenotImpl@35e0ba29 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[variable] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@2d2761b0 (value: variable) ->  
VarRef: [] |- variable : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7be60c35 (name: getCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@7be60c35 (name: getCurrentValue)

------------------------
ale.xtext.ale.impl.IfStatementImpl@2b3a5e4b ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[value].isBooleanValue()) { BooleanV... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1b3b98f7 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@1b3b98f7

------------------------
ale.xtext.ale.impl.OADenotImpl@d8750c1 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[value] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@464b62e0 (value: value) ->  
VarRef: [] |- value : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@3f7ab464 (name: isBooleanValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@3f7ab464 (name: isBooleanValue)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@4ff729cd (name: booleanValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@4ff729cd (name: booleanValue)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@38054907 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@38054907

------------------------
ale.xtext.ale.impl.OADenotImpl@4bcdfad4 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[value] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@3d821b21 (value: value) ->  
VarRef: [] |- value : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5f2349b6 (name: asBooleanValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@5f2349b6 (name: asBooleanValue)

------------------------
ale.xtext.ale.impl.VarAssignImpl@4d7c7e24 (name: currentValue) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- currentValue = booleanValue.isValue() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@69c33605 ->  
ChainedCall: [] |- booleanValue.isValue() : null
 VarRef: [] |- booleanValue : null
 OperationCallOperation: [] |- isValue() : null
  VarRef: [] |- booleanValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@44b5630f (value: booleanValue) ->  
VarRef: [] |- booleanValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@19eecd6 (name: isValue) ->  
OperationCallOperation: [] |- isValue() : null
 VarRef: [] |- booleanValue : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@2fbd2f9f ->  
ReturnStatement: [] |- return currentValue : null
 VarRef: [] |- currentValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@5f3e4773 (value: currentValue) ->  
VarRef: [] |- currentValue : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@2d5d8c31 (name: operandValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@2d5d8c31 (name: operandValue)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2e448641 ->  
ChainedCall: [] |- self.getCurrentValue(self.getOperand()) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...
 OperationCallOperation: [] |- getCurrentValue(self.getOperand()) : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.SelfRefImpl@42f8cd4 -> ale.xtext.ale.impl.ClassTypeTImpl@3c543305 
SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@45d2a464 (name: getCurrentValue) ->  
OperationCallOperation: [] |- getCurrentValue(self.getOperand()) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@233fe782 ->  
ChainedCall: [] |- self.getOperand() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...
 OperationCallOperation: [] |- getOperand() : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5b8e861d -> ale.xtext.ale.impl.ClassTypeTImpl@42dd30d0 
SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@bafe88c (name: getOperand) ->  
OperationCallOperation: [] |- getOperand() : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@3a0e4bae ->  
ChainedCall: [] |- self.assignValue(not operandValue) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...
 OperationCallOperation: [] |- assignValue(not operandValue) : null
  SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.SelfRefImpl@66d1b89a -> ale.xtext.ale.impl.ClassTypeTImpl@6ba7e001 
SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@49c07433 (name: assignValue) ->  
OperationCallOperation: [] |- assignValue(not operandValue) : null
 SelfRef: [] |- self : ClassTypeT 'open class BooleanUnaryExpre...

------------------------
ale.xtext.ale.impl.NotInfixOperationImpl@75447131 ->  
NotInfixOperationRule: [] |- not operandValue : null
 VarRef: [] |- operandValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@1e3a026b (value: operandValue) ->  
VarRef: [] |- operandValue : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@90702b2 (name: operandValue1) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@90702b2 (name: operandValue1)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1ae1f7d7 ->  
ChainedCall: [] |- self.getCurrentValue(self.getOperand1()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...
 OperationCallOperation: [] |- getCurrentValue(self.getOperand1()) : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5e8ede65 -> ale.xtext.ale.impl.ClassTypeTImpl@3feb1062 
SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6fad5594 (name: getCurrentValue) ->  
OperationCallOperation: [] |- getCurrentValue(self.getOperand1()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@405f1d73 ->  
ChainedCall: [] |- self.getOperand1() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...
 OperationCallOperation: [] |- getOperand1() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.SelfRefImpl@680a9eeb -> ale.xtext.ale.impl.ClassTypeTImpl@22bad081 
SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6d0e678b (name: getOperand1) ->  
OperationCallOperation: [] |- getOperand1() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@105c9aac (name: operandValue2) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@105c9aac (name: operandValue2)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@14918776 ->  
ChainedCall: [] |- self.getCurrentValue(self.getOperand2()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...
 OperationCallOperation: [] |- getCurrentValue(self.getOperand2()) : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.SelfRefImpl@abd9850 -> ale.xtext.ale.impl.ClassTypeTImpl@9ca3fb6 
SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7ec0fa51 (name: getCurrentValue) ->  
OperationCallOperation: [] |- getCurrentValue(self.getOperand2()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4b4559c6 ->  
ChainedCall: [] |- self.getOperand2() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...
 OperationCallOperation: [] |- getOperand2() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.SelfRefImpl@2d5c37e6 -> ale.xtext.ale.impl.ClassTypeTImpl@5db97166 
SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@5437526e (name: getOperand2) ->  
OperationCallOperation: [] |- getOperand2() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@395ade17 (name: result) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@395ade17 (name: result)

------------------------
ale.xtext.ale.impl.NullLiteralImpl@149fd464 -> ale.xtext.ale.impl.NullTypeTImpl@3a3602b3 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.IfStatementImpl@7ad550bb ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getOperator() == admodular.Integ... : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@15108390 (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@15108390 (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4ca5ce12 ->  
ChainedCall: [] |- self.getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...
 OperationCallOperation: [] |- getOperator() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.SelfRefImpl@26731f16 -> ale.xtext.ale.impl.ClassTypeTImpl@4efce3ac 
SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@7673c3eb (name: getOperator) ->  
OperationCallOperation: [] |- getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@676ec2b6 ->  
ChainedCall: [] |- admodular.IntegerCalculationOperator.ADD : null
 ChainedCall: [] |- admodular.IntegerCalculationOperator : null
  VarRef: [] |- admodular : null
  VarRef: [] |- IntegerCalculationOperator : null
 VarRef: [] |- ADD : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5594517 ->  
ChainedCall: [] |- admodular.IntegerCalculationOperator : null
 VarRef: [] |- admodular : null
 VarRef: [] |- IntegerCalculationOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@3b6c7105 (value: admodular) ->  
VarRef: [] |- admodular : null

------------------------
ale.xtext.ale.impl.VarRefImpl@53e88118 (value: IntegerCalculationOperator) ->  
VarRef: [] |- IntegerCalculationOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@428292a1 (value: ADD) ->  
VarRef: [] |- ADD : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@5500aaf0 (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 + operandValue2 : 

------------------------
ale.xtext.ale.impl.AddOperationImpl@42771109 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- operandValue1 + operandValue2 : 

------------------------
ale.xtext.ale.impl.VarRefImpl@14b6947c (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@7957d42f (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@53d515b5 (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 - operandValue2 : 

------------------------
ale.xtext.ale.impl.SubOperationImpl@73e06ec7 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- operandValue1 - operandValue2 : 

------------------------
ale.xtext.ale.impl.VarRefImpl@34512a38 (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@189b1423 (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@6398d238 (name: resultValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@6398d238 (name: resultValue)

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@2ec3e677 (name: IntegerValue) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new IntegerValue() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6e39c580 ->  
ChainedCall: [] |- resultValue.setValue(result) : null
 VarRef: [] |- resultValue : null
 OperationCallOperation: [] |- setValue(result) : null
  VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@4b95d36d (value: resultValue) ->  
VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@28fe0c0b (name: setValue) ->  
OperationCallOperation: [] |- setValue(result) : null
 VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@390a644f (value: result) ->  
VarRef: [] |- result : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5c61c6b8 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@5c61c6b8

------------------------
ale.xtext.ale.impl.OADenotImpl@4a7176b ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self.getAssignee()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@60455e9d ->  
ChainedCall: [] |- self.getAssignee() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...
 OperationCallOperation: [] |- getAssignee() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.SelfRefImpl@a8766c6 -> ale.xtext.ale.impl.ClassTypeTImpl@1693424a 
SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@58012528 (name: getAssignee) ->  
OperationCallOperation: [] |- getAssignee() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerCalculatio...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@64a17d0c (name: setCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@64a17d0c (name: setCurrentValue)

------------------------
ale.xtext.ale.impl.VarRefImpl@1f5a94e8 (value: resultValue) ->  
VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@17a13048 (name: operandValue1) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@17a13048 (name: operandValue1)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4a34877c ->  
ChainedCall: [] |- self.getCurrentValue(self.getOperand1()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getCurrentValue(self.getOperand1()) : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@2ed02cee -> ale.xtext.ale.impl.ClassTypeTImpl@b723bf 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@30ed6a0c (name: getCurrentValue) ->  
OperationCallOperation: [] |- getCurrentValue(self.getOperand1()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1a82e967 ->  
ChainedCall: [] |- self.getOperand1() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getOperand1() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@351a1185 -> ale.xtext.ale.impl.ClassTypeTImpl@a1e8a80 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6e7cb020 (name: getOperand1) ->  
OperationCallOperation: [] |- getOperand1() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@6883e90 (name: operandValue2) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@6883e90 (name: operandValue2)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6e3f9832 ->  
ChainedCall: [] |- self.getCurrentValue(self.getOperand2()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getCurrentValue(self.getOperand2()) : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@6549d865 -> ale.xtext.ale.impl.ClassTypeTImpl@23d6e9ec 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@22f206e2 (name: getCurrentValue) ->  
OperationCallOperation: [] |- getCurrentValue(self.getOperand2()) : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@5a8f08e3 ->  
ChainedCall: [] |- self.getOperand2() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getOperand2() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@71ae6927 -> ale.xtext.ale.impl.ClassTypeTImpl@2f5b7ece 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@43d9b4e6 (name: getOperand2) ->  
OperationCallOperation: [] |- getOperand2() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@14d32e87 (name: result) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@14d32e87 (name: result)

------------------------
ale.xtext.ale.impl.NullLiteralImpl@345c544f -> ale.xtext.ale.impl.NullTypeTImpl@16c80a41 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.IfStatementImpl@3a2ca8a6 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getOperator() == admodular.Integ... : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@37861e72 (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@37861e72 (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4ee112f8 ->  
ChainedCall: [] |- self.getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getOperator() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@18c9d947 -> ale.xtext.ale.impl.ClassTypeTImpl@687cc892 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@47ff2b60 (name: getOperator) ->  
OperationCallOperation: [] |- getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@408dd863 ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator.EQUA... : null
 ChainedCall: [] |- admodular.IntegerComparisonOperator : null
  VarRef: [] |- admodular : null
  VarRef: [] |- IntegerComparisonOperator : null
 VarRef: [] |- EQUALS : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@63d7458 ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator : null
 VarRef: [] |- admodular : null
 VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@50688639 (value: admodular) ->  
VarRef: [] |- admodular : null

------------------------
ale.xtext.ale.impl.VarRefImpl@6e72137f (value: IntegerComparisonOperator) ->  
VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@40129012 (value: EQUALS) ->  
VarRef: [] |- EQUALS : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@392da137 (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 == operandValue2 : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@473ab486 (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@473ab486 (op: ==)

------------------------
ale.xtext.ale.impl.VarRefImpl@137c2e73 (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@3b2b10b3 (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.IfStatementImpl@7dd72d01 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getOperator() == admodular.Integ... : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@faa8b7e (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@faa8b7e (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@6ce7bcb0 ->  
ChainedCall: [] |- self.getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getOperator() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5a5d472e -> ale.xtext.ale.impl.ClassTypeTImpl@7c71c5f8 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@1ea6c641 (name: getOperator) ->  
OperationCallOperation: [] |- getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@458c5f90 ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator.GREA... : null
 ChainedCall: [] |- admodular.IntegerComparisonOperator : null
  VarRef: [] |- admodular : null
  VarRef: [] |- IntegerComparisonOperator : null
 VarRef: [] |- GREATER : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@14df69ad ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator : null
 VarRef: [] |- admodular : null
 VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@248b382f (value: admodular) ->  
VarRef: [] |- admodular : null

------------------------
ale.xtext.ale.impl.VarRefImpl@cb76631 (value: IntegerComparisonOperator) ->  
VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@2be0d8e8 (value: GREATER) ->  
VarRef: [] |- GREATER : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@39aa5cc4 (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 > operandValue2 : 

------------------------
ale.xtext.ale.impl.CompareGOperationImpl@e1b332e ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- operandValue1 > operandValue2 : 

------------------------
ale.xtext.ale.impl.VarRefImpl@23918d9d (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@d536b49 (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.IfStatementImpl@312197f8 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getOperator() == admodular.Integ... : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@1ef31924 (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@1ef31924 (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@86c2090 ->  
ChainedCall: [] |- self.getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getOperator() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@4c0e0544 -> ale.xtext.ale.impl.ClassTypeTImpl@82869b6 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@712dd56a (name: getOperator) ->  
OperationCallOperation: [] |- getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7711d852 ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator.GREA... : null
 ChainedCall: [] |- admodular.IntegerComparisonOperator : null
  VarRef: [] |- admodular : null
  VarRef: [] |- IntegerComparisonOperator : null
 VarRef: [] |- GREATER_EQUALS : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@1e101e80 ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator : null
 VarRef: [] |- admodular : null
 VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@22881c23 (value: admodular) ->  
VarRef: [] |- admodular : null

------------------------
ale.xtext.ale.impl.VarRefImpl@3d110b9d (value: IntegerComparisonOperator) ->  
VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@443b8725 (value: GREATER_EQUALS) ->  
VarRef: [] |- GREATER_EQUALS : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@38ca0353 (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 >= operandValue2 : 

------------------------
ale.xtext.ale.impl.CompareGEOperationImpl@db2aa34 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- operandValue1 >= operandValue2 : 

------------------------
ale.xtext.ale.impl.VarRefImpl@15280608 (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@44116904 (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.IfStatementImpl@34d2c6e5 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if(self.getOperator() == admodular.Integ... : 

------------------------
ale.xtext.ale.impl.EqualityOperationImpl@611f8e31 (op: ==) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.EqualityOperationImpl@611f8e31 (op: ==)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@2e89925f ->  
ChainedCall: [] |- self.getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getOperator() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@4b17269a -> ale.xtext.ale.impl.ClassTypeTImpl@5ee4e0f0 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@69d034f3 (name: getOperator) ->  
OperationCallOperation: [] |- getOperator() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.ChainedCallImpl@742341fe ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator.SMAL... : null
 ChainedCall: [] |- admodular.IntegerComparisonOperator : null
  VarRef: [] |- admodular : null
  VarRef: [] |- IntegerComparisonOperator : null
 VarRef: [] |- SMALLER : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@16da3e4f ->  
ChainedCall: [] |- admodular.IntegerComparisonOperator : null
 VarRef: [] |- admodular : null
 VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@648bf9f8 (value: admodular) ->  
VarRef: [] |- admodular : null

------------------------
ale.xtext.ale.impl.VarRefImpl@c943e36 (value: IntegerComparisonOperator) ->  
VarRef: [] |- IntegerComparisonOperator : null

------------------------
ale.xtext.ale.impl.VarRefImpl@62d6b2eb (value: SMALLER) ->  
VarRef: [] |- SMALLER : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@1e46a9ce (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 < operandValue2 : 

------------------------
ale.xtext.ale.impl.CompareLOperationImpl@330e41be ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- operandValue1 < operandValue2 : 

------------------------
ale.xtext.ale.impl.VarRefImpl@6418ecde (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@fcf5ce5 (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.VarAssignImpl@65ae3a99 (name: result) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- result = operandValue1 <= operandValue2 : 

------------------------
ale.xtext.ale.impl.CompareLEOperationImpl@467354ee ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- operandValue1 <= operandValue2 : 

------------------------
ale.xtext.ale.impl.VarRefImpl@332e10b1 (value: operandValue1) ->  
VarRef: [] |- operandValue1 : null

------------------------
ale.xtext.ale.impl.VarRefImpl@73e25e0b (value: operandValue2) ->  
VarRef: [] |- operandValue2 : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@678cc81c (name: resultValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@678cc81c (name: resultValue)

------------------------
ale.xtext.ale.impl.ConstructorOperationImpl@786c006e (name: BooleanValue) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- new BooleanValue() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@199f1b6e ->  
ChainedCall: [] |- resultValue.setValue(result) : null
 VarRef: [] |- resultValue : null
 OperationCallOperation: [] |- setValue(result) : null
  VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@18d2ec69 (value: resultValue) ->  
VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@26dd648 (name: setValue) ->  
OperationCallOperation: [] |- setValue(result) : null
 VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@7b3fe55d (value: result) ->  
VarRef: [] |- result : null

------------------------
ale.xtext.ale.impl.ChainedCallImpl@7401eff7 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@7401eff7

------------------------
ale.xtext.ale.impl.OADenotImpl@1832a8a9 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[self.getAssignee()] : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@54ac68b5 ->  
ChainedCall: [] |- self.getAssignee() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...
 OperationCallOperation: [] |- getAssignee() : null
  SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.SelfRefImpl@50bd6a70 -> ale.xtext.ale.impl.ClassTypeTImpl@50d29be6 
SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@2bb859c7 (name: getAssignee) ->  
OperationCallOperation: [] |- getAssignee() : null
 SelfRef: [] |- self : ClassTypeT 'open class IntegerComparison...

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@26c2dbf9 (name: setCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@26c2dbf9 (name: setCurrentValue)

------------------------
ale.xtext.ale.impl.VarRefImpl@2a49e0fd (value: resultValue) ->  
VarRef: [] |- resultValue : null

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@25609ca2 (name: currentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@25609ca2 (name: currentValue)

------------------------
ale.xtext.ale.impl.NullLiteralImpl@44704932 -> ale.xtext.ale.impl.NullTypeTImpl@227eda01 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@32628037 (name: value) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@32628037 (name: value)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@68da4b88 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@68da4b88

------------------------
ale.xtext.ale.impl.OADenotImpl@2ea5a678 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[variable] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@8e0f8a3 (value: variable) ->  
VarRef: [] |- variable : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@2f7be2cd (name: getCurrentValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@2f7be2cd (name: getCurrentValue)

------------------------
ale.xtext.ale.impl.IfStatementImpl@15477aa1 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- if($[value].isIntegerValue()) { IntegerV... : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@16d28817 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@16d28817

------------------------
ale.xtext.ale.impl.OADenotImpl@19f84f8e ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[value] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@69e5abf6 (value: value) ->  
VarRef: [] |- value : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@47594619 (name: isIntegerValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@47594619 (name: isIntegerValue)

------------------------
ale.xtext.ale.impl.VarDeclarationImpl@1e164fcd (name: integerValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.VarDeclarationImpl@1e164fcd (name: integerValue)

------------------------
ale.xtext.ale.impl.ChainedCallImpl@570c0128 ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.ChainedCallImpl@570c0128

------------------------
ale.xtext.ale.impl.OADenotImpl@5da97058 ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- $[value] : 

------------------------
ale.xtext.ale.impl.VarRefImpl@716d3407 (value: value) ->  
VarRef: [] |- value : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@6cf75035 (name: asIntegerValue) ->  it.xsemantics.runtime.RuleFailedException: failed: cannot type statement ale.xtext.ale.impl.OperationCallOperationImpl@6cf75035 (name: asIntegerValue)

------------------------
ale.xtext.ale.impl.VarAssignImpl@5b4509c2 (name: currentValue) ->  it.xsemantics.runtime.RuleFailedException: cannot find a rule for |- currentValue = integerValue.getValue() : 

------------------------
ale.xtext.ale.impl.ChainedCallImpl@4d789942 ->  
ChainedCall: [] |- integerValue.getValue() : null
 VarRef: [] |- integerValue : null
 OperationCallOperation: [] |- getValue() : null
  VarRef: [] |- integerValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@552d51e6 (value: integerValue) ->  
VarRef: [] |- integerValue : null

------------------------
ale.xtext.ale.impl.OperationCallOperationImpl@30dc58e (name: getValue) ->  
OperationCallOperation: [] |- getValue() : null
 VarRef: [] |- integerValue : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@7075c734 ->  
ReturnStatement: [] |- return currentValue : null
 VarRef: [] |- currentValue : null

------------------------
ale.xtext.ale.impl.VarRefImpl@794ee2f1 (value: currentValue) ->  
VarRef: [] |- currentValue : null

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@24a44956 -> ale.xtext.ale.impl.BooleanTypeTImpl@69d06221 
ReturnStatement: [] |- return true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@72f815be (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@10cafc8b 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@717e62ee -> ale.xtext.ale.impl.ClassTypeTImpl@548358df 
ReturnStatement: [] |- return self : ClassTypeT 'open class ControlFlow { def...
 SelfRef: [] |- self : ClassTypeT 'open class ControlFlow { def...

------------------------
ale.xtext.ale.impl.SelfRefImpl@5a2916d4 -> ale.xtext.ale.impl.ClassTypeTImpl@f92e9c 
SelfRef: [] |- self : ClassTypeT 'open class ControlFlow { def...

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@2d50b834 -> ale.xtext.ale.impl.BooleanTypeTImpl@6a5295c8 
ReturnStatement: [] |- return false : BooleanTypeT
 BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@6fdc313f (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@2d3b02ad 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@58346df1 -> ale.xtext.ale.impl.NullTypeTImpl@6330f275 
ReturnStatement: [] |- return null : NullTypeT
 NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.NullLiteralImpl@577b6247 -> ale.xtext.ale.impl.NullTypeTImpl@2af4ad41 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@44d45144 -> ale.xtext.ale.impl.BooleanTypeTImpl@54769102 
ReturnStatement: [] |- return false : BooleanTypeT
 BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@10d98245 (value: false) -> ale.xtext.ale.impl.BooleanTypeTImpl@212dcf4b 
BooleanLiteral: [] |- false : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@54ebbc90 -> ale.xtext.ale.impl.NullTypeTImpl@45ea2241 
ReturnStatement: [] |- return null : NullTypeT
 NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.NullLiteralImpl@1d55b292 -> ale.xtext.ale.impl.NullTypeTImpl@4a7b0118 
NullLiteralt: [] |- null : NullTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@338f157f -> ale.xtext.ale.impl.BooleanTypeTImpl@2ae567d4 
ReturnStatement: [] |- return true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@63f6b41a (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@657db254 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@41f939f1 -> ale.xtext.ale.impl.ClassTypeTImpl@71116c90 
ReturnStatement: [] |- return self : ClassTypeT 'open class BooleanValue { de...
 SelfRef: [] |- self : ClassTypeT 'open class BooleanValue { de...

------------------------
ale.xtext.ale.impl.SelfRefImpl@7fc1ddaf -> ale.xtext.ale.impl.ClassTypeTImpl@6370c06b 
SelfRef: [] |- self : ClassTypeT 'open class BooleanValue { de...

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@108e8541 -> ale.xtext.ale.impl.BooleanTypeTImpl@622ac016 
ReturnStatement: [] |- return true : BooleanTypeT
 BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.BooleanLiteralImpl@5fd444c (value: true) -> ale.xtext.ale.impl.BooleanTypeTImpl@6a4d3115 
BooleanLiteral: [] |- true : BooleanTypeT

------------------------
ale.xtext.ale.impl.ReturnStatementImpl@13c7a165 -> ale.xtext.ale.impl.ClassTypeTImpl@1042b520 
ReturnStatement: [] |- return self : ClassTypeT 'open class IntegerValue { de...
 SelfRef: [] |- self : ClassTypeT 'open class IntegerValue { de...

------------------------
ale.xtext.ale.impl.SelfRefImpl@190effea -> ale.xtext.ale.impl.ClassTypeTImpl@75544cdb 
SelfRef: [] |- self : ClassTypeT 'open class IntegerValue { de...
